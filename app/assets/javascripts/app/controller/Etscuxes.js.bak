    /**
     * 自定义组件的controller
     * ExpandableCustomerUnitCombo是前面筛选客户单位，后面一个小加号弹对话框新增
     * ExpandableCustomerCombo是前面筛选客户姓名，后面一个小加号弹对话框新增
     * ExpandableVendorUnitCombo是前面筛选工厂，后面一个小加号弹对话框新增
     * ExpandableProductCombo是前面筛选产品，后面一个小加号弹对话框新增
     */
    Ext.define('EIM.controller.Etscuxes', {
        extend: 'Ext.app.Controller',
     
        views: [
            'etscux.ExpandableCustomerUnitCombo',
            'etscux.ExpandableCustomerCombo',
            'etscux.ExpandableVendorUnitCombo',
            'etscux.ExpandableProductCombo',
            'customer_unit.Form',
            'customer.Form',
            'vendor_unit.MiniAddForm',
            'product.MiniAddForm'
        ],
        stores: [
            'dict.Leads',
            'dict.Applications',
            'dict.CustomerUnitSorts',
            'dict.Cities',
            'CustomerUnits',
            'Customers',
            'VendorUnits',
            'Products'
        ],
        models: [
            'dict.Lead',
            'dict.Application',
            'dict.CustomerUnitSort',
            'dict.City',
            'CustomerUnit',
            'Customer',
            'VendorUnit',
            'Product'
        ],
     
    //    refs: [{
    //        ref: 'zzform',
    //        selector: 'form'
    //    }],
     
        init: function() {
            var me = this;
    //        Ext.ComponentQuery.query('expandable_customer_combo combo')[0].getStore()
            me.control({
                /**
                 * 客户和客户单位的组
                 */
                'expandable_customer_unit_combo combo': {
                    select: this.addParamsToCustomerStore
                },
                'expandable_customer_unit_combo button[text=+]': {
                    render: function() {
    //                    Ext.getStore("dict.Applications").load();
                    },
                    click: this.popupFormAndSetValue
                },
                'expandable_customer_combo combo': {
                    beforequery: function(queryEvent, records, eOpts) {
                        delete queryEvent.combo.lastQuery;
                    },
                    expand: function() {
                        return false;
                    }
                },
                'expandable_customer_combo button[text=+]': {
                    render: function() {
                        Ext.getStore("dict.Applications").load();
                    },
                    click: this.popUpFormAndSetCustomerUnitValue
                },
                
                
                /**
                 * 工厂和产品的组
                 */
                'expandable_vendor_unit_combo combo': {
                    select: function(combo, records, eOpts) {
                        var product_field = combo.up('form').down('expandable_product_combo', false);
                        if(product_field){
                            var product_combo = product_field.down('combo', false);
                            product_combo.getStore().getProxy().extraParams['vendor_unit_id'] = records[0]["data"]["id"];
                            product_combo.reset();
                        }
                    }
                },
                'expandable_vendor_unit_combo button[text=+]': {
                    render: function() {
    //                    Ext.getStore("dict.Applications").load();
                    },
                    click: function(){
                        var me = this;
                        load_uniq_controller(me, 'VendorUnits');
                        Ext.widget('vendor_unit_mini_add_form').show();
                    }
                },
                'expandable_product_combo combo': {
                    beforequery: function(queryEvent, records, eOpts) {
                        delete queryEvent.combo.lastQuery;
                    },
                    expand: function() {
                        return false;
                    }
                },
                'expandable_product_combo button[text=+]': {
                    render: function() {
//                        Ext.getStore("dict.Applications").load();
                    },
                    click: function(){
                        var me = this;
                        load_uniq_controller(me, 'Products');
                        Ext.widget('product_mini_add_form').show();
                    }
                }
            });
        },
        
        /**
         * 如果有客户下拉框在同一表单内(比如本身就是“新增客户”的表单，则不会有选择客户的下拉框)，
         * 则给此客户下拉框加一个参数：当前选中客户单位ID
         * TODO
         * 如果有“地址”在同一表单内，则要把返回的地址填进去作为默认值。但后台现在没有返回“地址”的项
         */
        addParamsToCustomerStore: function(combo, records, eOpts) {
            var expand = combo.up('form').down('expandable_customer_combo', false)
            if(expand){
                var customer_combo = expand.down('combo', false);
                customer_combo.getStore().getProxy().extraParams['customer_unit_id'] = records[0]["data"]["id"];
            }
        },
        
        /**
         * 弹出“新增客户单位”的表单，并把已经填的值放进表单里
         */
        popupFormAndSetValue: function(button){
            var me = this;
            var value = button.up('expandable_customer_unit_combo').down('combo').getRawValue();
            load_uniq_controller(me, 'CustomerUnits');
            //把已经填的值带给弹出的窗口
            var form = Ext.widget('customer_unit_form');
            form.show('', function(){
                var name = form.down('[name=name]');
                name.setValue(value);
            });
        },
        
        /**
         * 弹出“新增客户”的表单，并视情况把已经填的客户单位的值放进表单里
         */
        popUpFormAndSetCustomerUnitValue: function(button){
            var me = this;
            load_uniq_controller(me, 'Customers');
            var form = Ext.widget('customer_form');
            form.show('', function() {
                var expand_customer_unit = button.up('form').down('expandable_customer_unit_combo');
                if(expand_customer_unit) {
                    var combo = expand_customer_unit.down('combo')
                    if(combo.getValue() === combo.getRawValue()) {
                        //如果两个值相等，说明是个假值(还没有这个单位)，则弹出的表单里不预填写
                    }else{
                        //否则把单位的值传过去
                        var target_combo = form.down('expandable_customer_unit_combo').down('combo');
                        target_combo.setValue(combo.getValue());
                    }
                }
            });
        }
    });
