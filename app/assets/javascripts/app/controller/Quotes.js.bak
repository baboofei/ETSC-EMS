/**
 * 报价标签页上的controller
 */
Ext.define('EIM.controller.Quotes', {
    extend:'Ext.app.Controller',

    stores:[
        'Quotes',
        'QuoteItems',
        'ComboSalecases',
        'ComboOurCompanies',
        'ComboSales',
        'dict.Currencies',
        'dict.QuoteTypes',
        'dict.QuoteLanguages',
        'dict.QuoteFormats',
        'AllDicts'
    ],
    models:[
        'Quote',
        'QuoteItem',
        'ComboSalecase',
        'ComboOurCompany',
        'ComboSale',
        'dict.Currency',
        'dict.QuoteType',
        'dict.QuoteLanguage',
        'dict.QuoteFormat',
        'AllDict'
    ],

    views:[
        'etscux.AmountWithCurrency',
        'quote.Panel',
        'quote.Grid',
        'quote.Detail',
        'quote.Info',
        'quote.ItemPanel',
        'quote.ItemConfig',
        'quote.ItemTree',
        'quote.ItemFoot',
        'quote.ItemFee',
        'quote.Term'
    ],

    refs:[
        {
            ref: 'grid',
            selector: 'quote_grid'
        },
        {
            ref: 'itemgrid',
            selector: 'quote_item_tree'
        }
    ],

    init:function () {
        var me = this;
        me.control({
            'quote_grid button[action=addQuote]': {
                click: this.addQuote
            },
            '[name=exchange_rate_hash]': {
                change: this.updateExchangeRateInItemAndBlockForm
            },

            'quote_info combo[name=user_id], quote_form combo[name=user_id]': {
                render: this.triggerDisableUserId,
                select: this.addParamsToComboSalecaseStore
            },
            'quote_info combo[name=case_id], quote_form combo[name=case_id]': {
                beforequery: function(queryEvent, records, eOpts) {
                    delete queryEvent.combo.lastQuery;
                }
            },
            'quote_item_tree': {
                selectionchange: this.selectionChange,
                itemdblclick: this.editOrExpand
            },
            'quote_item_tree button[action=addQuoteBlock]': {
                click: this.addQuoteBlock
            },
            'quote_item_tree button[action=addQuoteItem]': {
                click: this.addQuoteItem
            },
            'quote_item_tree button[action=editQuoteBlock]': {
                click: this.editQuoteBlock
            },
            'quote_item_tree button[action=editQuoteItem]': {
                click: this.editQuoteItem
            },
            'quote_item_tree button[action=batchMarkUpDown]': {
                click: this.batchMarkUpDown
            },
            'quote_item_tree button[action=deleteSelection]': {
                click: this.deleteSelection
            },
            'button[action=exchange_rate_manage]': {
                click: this.manageExchangeRate
            },

            'quote_item_fee combo[name=quote_currency]': {
                change: this.triggerFIF
            },
            'quote_item_fee checkbox[name=does_count_ctvat]': {
                change: this.triggerTaxes
            },

            'quote_term combo[name=price_type_of_term]': {
                change: this.triggerCity
            },
            'quote_term combo[name=pay_way1]': {
                change: this.triggerFlagTTLC
            },
            'quote_term checkbox': {
                change: this.triggerFlagUnify
            },

            'quote_item_tree treeview': {
                drop: this.reCalculateTree
            },

            'quote_item_foot [name=total_price]': {
                change: this.calculateFinalPriceWithTotalPrice
            },
            'quote_item_foot [name=less_special_discount]': {
                change: this.calculateFinalPriceWithLessSpecialDiscount
            },
            'quote_item_foot [name=freight_insurance_cost]': {
                change: this.calculateFinalPriceWithFreightInsuranceCost
            },
            'quote_item_fee [name=max_custom_tax]': {
                change: this.calculateFinalPriceWithMaxCustomTax,
                enable: this.calculateFinalPriceWithMaxCustomTaxZ,
                disable: this.calculateFinalPriceWithMaxCustomTaxZ
            },
            'quote_item_fee [name=vat]': {
                change: this.calculateFinalPriceWithVat,
                enable: this.calculateFinalPriceWithVatZ,
                disable: this.calculateFinalPriceWithVatZ
            },
            'quote_item_foot [name=final_price]': {
                change: this.calculateRmb
            },

            'quote_panel button[action=submit]': {
                click: this.submit
            }
        });
    },

    addQuote: function() {
        var me = this;
        load_uniq_controller(me, 'quote.Form');
        Ext.widget('quote_form').show();
    },

    /**
     * 当全体汇率的hash(exchange_rate_hash)改变的时候，判断有无报价项/报价块的窗口
     * 有则改变其中的汇率值
     */
    updateExchangeRateInItemAndBlockForm: function(hidden) {
        var form;
        if(Ext.ComponentQuery.query('quote_item_form').length > 0) {
            form = Ext.ComponentQuery.query('quote_item_form form')[0];
        }else if(Ext.ComponentQuery.query('quote_block_form').length > 0) {
            form = Ext.ComponentQuery.query('quote_block_form form')[0];
        }else{
            return false;
        }

        var original_currency_field = form.down('[name=source_price_currency_id]');
        var original_exchange_rate_field = form.down('[name=original_exchange_rate]');
        var currency_field = form.down('[name=total_currency_id]');
        var exchange_rate_field = form.down('[name=exchange_rate]');

        var exchange_rate_hash = Ext.decode(hidden.getValue());
        Ext.Array.each(exchange_rate_hash, function(item, index, allItems) {
            if(original_currency_field.getRawValue() === item['currency']) {
                original_exchange_rate_field.setValue(item['exchange_rate']);
            }
            if(currency_field.getRawValue() === item['currency']) {
                exchange_rate_field.setValue(item['exchange_rate']);
            }
        });
    },

    triggerDisableUserId: function(combo) {
        Ext.Ajax.request({
            url: 'yyy',
            method: 'get',
            params: {
                user_id: userName//TODO 这个要换成user_id当参数传，然后后台判断有无权限
            },
            success: function(response) {
                if(response.responseText === 'abc') {
                    combo.setDisabled(true);
                }else{
                    combo.setDisabled(false);
                }
            },
            failure: function() {

            }
        })
    },

    /**
     * 选了负责工程师后要把值作为参数赋给个案的combo
     */
    addParamsToComboSalecaseStore: function(combo, records, eOpts) {
        var case_combo = combo.up('form').down('[name=case_id]', false)
        if(case_combo){
            case_combo.getStore().getProxy().extraParams['user_id'] = records[0]["data"]["id"];
            case_combo.reset();
        }
    },

    selectionChange: function(model, selected, eOpts) {
        var item_grid = this.getItemgrid();
        var edit_block_btn = item_grid.down('[action=editQuoteBlock]', false);
        var edit_item_btn = item_grid.down('[action=editQuoteItem]', false);
        var batch_btn = item_grid.down('[action=batchMarkUpDown]', false);
        var delete_btn = item_grid.down('[action=deleteSelection]', false);
        if(selected.length === 1) {
            //如果选中的只有一个，视选中的是何种类型而显示出对应的“修改”按钮
            var is_leaf = Ext.pluck(Ext.pluck(selected, 'data'), 'leaf')[0];
            if(is_leaf) {
                edit_block_btn.hide();
                edit_block_btn.disable();
                edit_item_btn.show();
                edit_item_btn.enable();
            }else{
                edit_block_btn.show();
                edit_block_btn.enable();
                edit_item_btn.hide();
                edit_item_btn.disable();
            }

            batch_btn.disable();
            delete_btn.enable();
        }else if(selected.length === 0) {
            //如果选中零个，则“修改”按钮的状态复原
            edit_block_btn.show();
            edit_block_btn.disable();
            edit_item_btn.hide();
            edit_item_btn.disable();

            batch_btn.disable();
            delete_btn.disable();
        }else{
            //如果选中的多于一个，则“修改”按钮的状态复原，且根据情况判断“批量加/减价”按钮是否可用
            edit_block_btn.show();
            edit_block_btn.disable();
            edit_item_btn.hide();
            edit_item_btn.disable();

            var leaf_array = Ext.pluck(Ext.pluck(selected, 'data'), 'leaf');
            var uniq_leaf_array = Ext.Array.unique(leaf_array);
            var depth_array = Ext.pluck(Ext.pluck(selected, 'data'), 'depth');
            var uniq_depth_array = Ext.Array.unique(depth_array);
            if(uniq_leaf_array.length === 1 && uniq_depth_array.length === 1 && uniq_leaf_array[0] === true) {
                //如果是全部选的同一层级的叶子，则允许批量加/减价
                batch_btn.enable();
            }else{
                batch_btn.disable();
            }
            delete_btn.enable();
        }
    },

    deleteSelection: function() {
        var me = this;
        Ext.Msg.confirm('确认删除', '真的要删除选中的所有报价项？', function(button){
            if (button === 'yes') {
                Ext.Array.each(me.getItemgrid().getSelectedItems(), function(item, index, allItems) {
                    item.remove();
                });
                me.getController('Quotes').reCalculateTree();
            } else {
                return false;
            }
        });
    },

    editOrExpand: function(view, record, item, index, e, eOpts) {
        if(record.data.leaf) {
            this.editQuoteItem()
        }else{
            this.editQuoteBlock();
        }
    },

    addQuoteBlock: function() {
        var me = this;
        load_uniq_controller(me, 'quote.BlockForm');
        var view = Ext.widget('quote_block_form').show();
        var btn_save = view.down('button[action=save]', false);
        var btn_update = view.down('button[action=update]', false);
        btn_save.show();
        btn_update.hide();
        this.ajaxGetCurrency();
    },
    addQuoteItem: function() {
        var me = this;
        load_uniq_controller(me, 'quote.ItemForm');
        var view = Ext.widget('quote_item_form').show();
        var btn_save = view.down('button[action=save]', false);
        var btn_update = view.down('button[action=update]', false);
        btn_save.show();
        btn_update.hide();
        this.ajaxGetCurrency();
    },
    /**
     * 动态加载币种并把币种和汇率的hash赋给exchange_rate_hash
     */
    ajaxGetCurrency: function() {
        Ext.Ajax.request({
            url:'/users/fake_for_currency',
            params: {
                query: 4
            },
            method: 'get',
            success:function(response){
                //                Ext.example.msg("OK", "修改成功！");
                var exchange_rate_hash_field = Ext.ComponentQuery.query('[name=exchange_rate_hash]')[0];
                var source_array = Ext.decode(response.responseText)['currencies'];
                var target_array = [];
                Ext.Array.each(source_array, function(item, index, allItems) {
                    var o = {
                        'currency': item['name'],
                        'exchange_rate': item['exchange_rate']
                    }
                    target_array.push(o);
                });
                exchange_rate_hash_field.setValue(Ext.encode(target_array));
            },
            failure:function(){
                Ext.Msg.alert('错误','获取后台汇率失败，请检查网络。');
            }
        });
    },

    editQuoteBlock: function() {
        var me = this;
        load_uniq_controller(me, 'quote.BlockForm');
        var record = this.getItemgrid().getSelectedItem();
        var view = Ext.widget('quote_block_form').show();
        var btn_save = view.down('button[action=save]', false);
        var btn_update = view.down('button[action=update]', false);
        btn_save.hide();
        btn_update.show();

        Ext.getStore('dict.Currencies').load(
            {
                callback: function(records, operation, success) {
//                    console.log(record['data']['item_total_amount']);
                    record['data']['source_price_amount'] = record['data']['original_unit_price'];
                    record['data']['source_price_currency_id'] = record['data']['original_currency_id'];

                    record['data']['system_price_amount'] = record['data']['system_price'];
                    record['data']['system_price_currency_id'] = record['data']['currency_id'];

                    record['data']['system_discount_amount'] = record['data']['system_discount'];
                    record['data']['system_discount_currency_id'] = record['data']['currency_id'];

                    if(isNaN(Number(record['data']['item_total_amount']))) {
                        record['data']['unit_price_amount'] = record['data']['system_price_amount'] - record['data']['system_discount_amount'];
                    }else{
                        record['data']['unit_price_amount'] = record['data']['item_total_amount'] - record['data']['system_discount_amount'];
                    }
                    record['data']['unit_price_currency_id'] = record['data']['currency_id'];

                    record['data']['discount_to_amount'] = record['data']['discount_to'];
                    record['data']['discount_to_currency_id'] = record['data']['currency_id'];

                    record['data']['discount_amount'] = record['data']['discount'];
                    record['data']['discount_currency_id'] = record['data']['currency_id'];

                    record['data']['total_currency_id'] = record['data']['currency_id'];

                    if(record['data']['quantity_2'] === 0) record['data']['quantity_2'] = "";
                    if(record['data']['times_1'] === 0 || record['data']['times_1'] === 1) record['data']['times_1'] = "";
                    if(record['data']['times_2'] === 0 || record['data']['times_2'] === 1) record['data']['times_2'] = "";
                    if(record['data']['divide_1'] === 0 || record['data']['divide_1'] === 1) record['data']['divide_1'] = "";
                    if(record['data']['divide_2'] === 0 || record['data']['divide_2'] === 1) record['data']['divide_2'] = "";

                    //TODO 感觉上修改的时候还要把当前记录中的值赋给exchange_rate_hash，但好像不赋也没问题……
                    view.down('form', false).loadRecord(record);
                }
            }
        );
    },
    editQuoteItem: function() {
        var me = this;
        load_uniq_controller(me, 'quote.ItemForm');
        var record = this.getItemgrid().getSelectedItem();
        var view = Ext.widget('quote_item_form').show();
        var btn_save = view.down('button[action=save]', false);
        var btn_update = view.down('button[action=update]', false);
        btn_save.hide();
        btn_update.show();

        Ext.getStore('dict.Currencies').load(
            {
                callback: function(records, operation, success) {
//                    console.log(record['data']);
                    record['data']['source_price_amount'] = record['data']['original_unit_price'];
                    record['data']['source_price_currency_id'] = record['data']['original_currency_id'];

                    record['data']['unit_price_amount'] = record['data']['unit_price'];
                    record['data']['unit_price_currency_id'] = record['data']['currency_id'];

                    record['data']['discount_amount'] = record['data']['discount'];
                    record['data']['discount_currency_id'] = record['data']['currency_id'];

                    record['data']['discount_to_amount'] = record['data']['discount_to'];
                    record['data']['discount_to_currency_id'] = record['data']['currency_id'];

                    record['data']['total_currency_id'] = record['data']['currency_id'];

                    if(record['data']['quantity_2'] === 0) record['data']['quantity_2'] = "";
                    if(record['data']['times_1'] === 0 || record['data']['times_1'] === 1) record['data']['times_1'] = "";
                    if(record['data']['times_2'] === 0 || record['data']['times_2'] === 1) record['data']['times_2'] = "";
                    if(record['data']['divide_1'] === 0 || record['data']['divide_1'] === 1) record['data']['divide_1'] = "";
                    if(record['data']['divide_2'] === 0 || record['data']['divide_2'] === 1) record['data']['divide_2'] = "";

                    //TODO 感觉上修改的时候还要把当前记录中的值赋给exchange_rate_hash，但好像不赋也没问题……
                    view.down('form', false).loadRecord(record);
                }
            }
        );
    },

    batchMarkUpDown: function() {
        var me = this;
        load_uniq_controller(me, 'quote.BatchMarkUpDownForm');
        Ext.widget('quote_batch_mark_up_down_form').show();
    },

    manageExchangeRate: function() {
        var me = this;
        load_uniq_controller(me, 'exchange_rate.Form');
        Ext.widget('exchange_rate_form').show();
    },

    /**
     * “运保费”下拉框的可用/不可用切换，同时设置成和报价的币种一致
     * @param combo
     * @param newValue
     * @param oldValue
     * @param eOpts
     */
    triggerFIF: function(combo, newValue, oldValue, eOpts) {
        var container = combo.up('container');
        var fif_field = container.down('[name=fif_currency]', false);
        fif_field.setDisabled(newValue != 2);
        fif_field.setValue(newValue);

        //另外由它的值控制新增报价/系统/子系统按钮的可用/不可用，以免忘记选
        var tree = Ext.ComponentQuery.query('quote_item_tree')[0];
        var add_sys_btn = tree.down('button[action=addQuoteBlock]', false);
        var add_itm_btn = tree.down('button[action=addQuoteItem]', false);
        add_sys_btn.setDisabled(Ext.isEmpty(newValue));
        add_itm_btn.setDisabled(Ext.isEmpty(newValue));

        //当树中已经有内容时，全部改币种并提示
        var root = tree.getRootNode();
        var array = [];
        this.getAllChildrenNode(root, array);
        if(newValue > 10) {
            Ext.Array.each(array, function(item, index, allItems) {
                item.set('currency', combo.getRawValue());
                item.set('currency_id', newValue);
            });
            Ext.example.msg('<span style="color: red; ">注意</span>', '产品币种已经修改，请及时调整报价项目的价格！');
        }
    },

    /**
     * “增值税”和“最大关税”两项的可用/不可用切换
     * @param checkbox
     * @param newValue
     * @param oldValue
     * @param eOpts
     */
    triggerTaxes: function(checkbox, newValue, oldValue, eOpts) {
        var container = checkbox.up('container');
        var max_custom_tax_field = container.down('[name=max_custom_tax]', false);
        var vat_field = container.down('[name=vat]', false);
        max_custom_tax_field.setDisabled(!newValue);
        vat_field.setDisabled(!newValue);
    },

    triggerCity: function(combo, newValue, oldValue, eOpts) {
        var field = combo.up().down('textfield', false);
        field.setDisabled(newValue === 3);
    },

    /**
     * “签合同后”付款方式的TT/LC切换
     * @param combo
     * @param newValue
     * @param oldValue
     * @param eOpts
     */
    triggerFlagTTLC: function(combo, newValue, oldValue, eOpts) {
        var form = combo.up('form');
        var field1 = form.down('[name=flag_1]', false);
        var field2 = form.down('[name=flag_2]', false);
        var field3 = form.down('[name=flag_3]', false);
        field1.setDisabled(newValue === 1);
        field2.setDisabled(newValue != 1);
        field3.setDisabled(newValue != 1);
    },

    /**
     * 下面一排checkbox对其后内容的可用/不可用切换
     * @param checkbox
     * @param newValue
     * @param oldValue
     * @param eOpts
     */
    triggerFlagUnify: function(checkbox, newValue, oldValue, eOpts) {
        var name_array = ['is_include_tax', 'is_delivery', 'is_warranty', 'has_warranty_priority', 'need_disassemble', 'need_on-site', 'is_special_discount'];
        if(Ext.Array.contains(name_array, checkbox.name)) {
            var container = checkbox.up('fieldcontainer').down('container', false);
            container.setDisabled(!newValue);
        }
    },

    reCalculateTree: function() {
        var root = Ext.getStore('QuoteItems').getRootNode();
        var sum_total = 0;
        this.updateAllNodes(root, sum_total);
    },
    /**
     * 递归更新树中所有的元素数据
     * @param node
     * @param sum
     */
    updateAllNodes: function updateNodes(node, sum) {
        if(node.childNodes.length > 0) {
            sum = 0;
            for(var i = 0; i < node.childNodes.length; i++) {
                //第一次递归的时候node是root，所以用node.parentNode来判断
                //node.childNode[i]才表示的是人类思维中的“本层”
                if(node.parentNode) {
                    node.childNodes[i].set('item_number', node.data['item_number'] + '-' + String(i + 1));
                }else{
                    node.childNodes[i].set('item_number', String(i + 1));
                }
                updateNodes(node.childNodes[i], sum);
            }
        }
        for(var j = 0; j < node.childNodes.length; j++) {
            sum += node.childNodes[j].data['total'];
            node.set('unit_price', sum);
            node.set('total', (sum - node.get('discount')) * node.get('quantity'));
            if(node.childNodes.length > 0) {
                node.set('item_total_amount', sum);
                node.set('discount_to', (sum - node.get('discount')));
            }
        }

        if(node === Ext.getStore('QuoteItems').getRootNode()) {
            var total_price_field = Ext.ComponentQuery.query('quote_item_foot [name=total_price]')[0];
            total_price_field.setValue(sum);
        }
    },

    /**
     * 当“合计”区域改变的时候计算“总计”
     * @param numberfield
     * @param newValue
     * @param oldValue
     * @param eOpts
     */
    calculateFinalPriceWithTotalPrice: function(numberfield, newValue, oldValue, eOpts) {
        var form = numberfield.up('form');
        var panel = form.up('panel');
        var total_price = newValue;

        var custom_tax_field = panel.down('[name=max_custom_tax]', false);
        var custom_tax = custom_tax_field.isDisabled() ? 0 : custom_tax_field.getValue();

        var vat_field = panel.down('[name=vat]', false);
        var vat = vat_field.isDisabled() ? 0 : Number(vat_field.getValue());//displayfield，取出来是字符串，要Number一下

        var less_special_discount_field = form.down('[name=less_special_discount]', false);
        var less_special_discount = less_special_discount_field.getValue();

        var freight_insurance_cost_field = form.down('[name=freight_insurance_cost]', false);
        var freight_insurance_cost = freight_insurance_cost_field.getValue();

        var final_price_field = form.down('[name=final_price]', false);
        var final_price = this.calculateFinalPrice(total_price, custom_tax, vat, less_special_discount, freight_insurance_cost);
        final_price_field.setValue(final_price);
    },

    /**
     * 当“总折扣”区域改变的时候计算“总计”
     * @param numberfield
     * @param newValue
     * @param oldValue
     * @param eOpts
     */
    calculateFinalPriceWithLessSpecialDiscount: function(numberfield, newValue, oldValue, eOpts) {
        var form = numberfield.up('form');
        var panel = form.up('panel');
        var total_price_field = form.down('[name=total_price]', false);
        var total_price = total_price_field.getValue();

        var custom_tax_field = panel.down('[name=max_custom_tax]', false);
        var custom_tax = custom_tax_field.isDisabled() ? 0 : custom_tax_field.getValue();

        var vat_field = panel.down('[name=vat]', false);
        var vat = vat_field.isDisabled() ? 0 : Number(vat_field.getValue());//displayfield，取出来是字符串，要Number一下

        var less_special_discount = newValue;

        var freight_insurance_cost_field = form.down('[name=freight_insurance_cost]', false);
        var freight_insurance_cost = freight_insurance_cost_field.getValue();

        var final_price_field = form.down('[name=final_price]', false);
        var final_price = this.calculateFinalPrice(total_price, custom_tax, vat, less_special_discount, freight_insurance_cost);
        final_price_field.setValue(final_price);
    },

    /**
     * 当“运保费”区域改变的时候计算“总计”
     * @param numberfield
     * @param newValue
     * @param oldValue
     * @param eOpts
     */
    calculateFinalPriceWithFreightInsuranceCost: function(numberfield, newValue, oldValue, eOpts) {
        var form = numberfield.up('form');
        var panel = form.up('panel');
        var total_price_field = form.down('[name=total_price]', false);
        var total_price = total_price_field.getValue();

        var custom_tax_field = panel.down('[name=max_custom_tax]', false);
        var custom_tax = custom_tax_field.isDisabled() ? 0 : custom_tax_field.getValue();

        var vat_field = panel.down('[name=vat]', false);
        var vat = vat_field.isDisabled() ? 0 : Number(vat_field.getValue());//displayfield，取出来是字符串，要Number一下

        var less_special_discount_field = form.down('[name=less_special_discount]', false);
        var less_special_discount = less_special_discount_field.getValue();

        var freight_insurance_cost = newValue;

        var final_price_field = form.down('[name=final_price]', false);
        var final_price = this.calculateFinalPrice(total_price, custom_tax, vat, less_special_discount, freight_insurance_cost);
        final_price_field.setValue(final_price);
    },

    /**
     * 当“最大关税”区域改变的时候计算“总计”
     * @param numberfield
     * @param newValue
     * @param oldValue
     * @param eOpts
     */
    calculateFinalPriceWithMaxCustomTax: function(displayfield, newValue, oldValue, eOpts) {
        var form = displayfield.up('form');
        var panel = form.up('panel');
        var total_price_field = panel.down('[name=total_price]', false);
        var total_price = total_price_field.getValue();

        var custom_tax_field = form.down('[name=max_custom_tax]', false);
        var custom_tax = custom_tax_field.isDisabled() ? 0 : custom_tax_field.getValue();

        var vat = displayfield.isDisabled() ? 0 : Number(newValue);//displayfield，取出来是字符串，要Number一下

        var less_special_discount_field = panel.down('[name=less_special_discount]', false);
        var less_special_discount = less_special_discount_field.getValue();

        var freight_insurance_cost_field = panel.down('[name=freight_insurance_cost]', false);
        var freight_insurance_cost = freight_insurance_cost_field.getValue();

        var final_price_field = panel.down('[name=final_price]', false);
        var final_price = this.calculateFinalPrice(total_price, custom_tax, vat, less_special_discount, freight_insurance_cost);
        final_price_field.setValue(final_price);
    },
    calculateFinalPriceWithMaxCustomTaxZ: function(displayfield, eOpts) {
        this.calculateFinalPriceWithMaxCustomTax(displayfield, displayfield.getValue(), null, null);
    },

    /**
     * 当“增值税”区域改变的时候计算“总计”
     * @param numberfield
     * @param newValue
     * @param oldValue
     * @param eOpts
     */
    calculateFinalPriceWithVat: function(numberfield, newValue, oldValue, eOpts) {
        var form = numberfield.up('form');
        var panel = form.up('panel');
        var total_price_field = panel.down('[name=total_price]', false);
        var total_price = total_price_field.getValue();

        var custom_tax_field = form.down('[name=max_custom_tax]', false);
        var custom_tax = custom_tax_field.isDisabled() ? 0 : custom_tax_field.getValue();

        var vat = numberfield.isDisabled() ? 0 : Number(newValue);//displayfield，取出来是字符串，要Number一下

        var less_special_discount_field = panel.down('[name=less_special_discount]', false);
        var less_special_discount = less_special_discount_field.getValue();

        var freight_insurance_cost_field = panel.down('[name=freight_insurance_cost]', false);
        var freight_insurance_cost = freight_insurance_cost_field.getValue();

        var final_price_field = panel.down('[name=final_price]', false);
        var final_price = this.calculateFinalPrice(total_price, custom_tax, vat, less_special_discount, freight_insurance_cost);
        final_price_field.setValue(final_price);
    },
    calculateFinalPriceWithVatZ: function(numberfield, eOpts) {
        this.calculateFinalPriceWithVat(numberfield, numberfield.getValue(), null, null);
    },

    /**
     * 根据“合计”、“最大关税”、“增值税”、“总折扣”、“运保费”得出“总计”
     * @param total_price
     * @param custom_tax
     * @param vat
     * @param less_special_discount
     * @param freight_insurance_cost
     * 总计 = (合计 + 运保费 - 总折扣) * (1 + 最大关税) * (1 + 增值税)
     */
    calculateFinalPrice: function(total_price, custom_tax, vat, less_special_discount, freight_insurance_cost) {
        var final_price = (total_price + freight_insurance_cost - less_special_discount) * (1 + custom_tax * 0.01) * (1 + vat * 0.01);
        return final_price;
    },

    calculateRmb: function(numberfield, newValue, oldValue, eOpts) {
        var exchange_rate_hash_field = Ext.ComponentQuery.query('[name=exchange_rate_hash]')[0];
        var exchange_rate_hash = Ext.decode(exchange_rate_hash_field.getValue());

        var quote_currency_field = Ext.ComponentQuery.query('combo[name=quote_currency]')[0];
        var quote_currency = quote_currency_field.getValue();
        var quote_currency_name = quote_currency_field.getRawValue();

        var quote_exchange_rate = 100;
        Ext.Array.each(exchange_rate_hash, function(item, index, array) {
            if(item['currency'] === quote_currency_name) {
                quote_exchange_rate = item['exchange_rate'];
                return false;
            }
        });

        var rmb_field = Ext.ComponentQuery.query('[name=rmb]')[0];
        rmb_field.setValue(newValue * quote_exchange_rate / 100);
    },

    submit: function() {
        var node = Ext.getStore('QuoteItems').getRootNode();
        var tree_array = [];
        this.getAllNodes(node, tree_array);
        //递归的结果是每一行都把children算进去了一次，所以要去掉
        Ext.Array.each(tree_array, function(item, index, array) {
            delete item["children"];
        });
        console.log('下面是树的JSON');
        console.log(Ext.encode(tree_array));

        var info_field = Ext.ComponentQuery.query('quote_info')[0];
        console.log('下面是“报价信息”标签里的JSON');
        console.log(info_field.getValues());
        
        var item_config_field = Ext.ComponentQuery.query('quote_item_config')[0];
        console.log('下面是“PDF设置”区域里的JSON');
        console.log(item_config_field.getValues());
        
        var item_fee_field = Ext.ComponentQuery.query('quote_item_fee')[0];
        console.log('下面是“各种费用相关”区域里的JSON');
        console.log(item_fee_field.getValues());
        
        var item_foot_field = Ext.ComponentQuery.query('quote_item_foot')[0];
        console.log('下面是“合计”区域里的JSON');
        console.log(item_foot_field.getValues());
        
        var term_field = Ext.ComponentQuery.query('quote_term')[0];
        console.log('下面是“报价条款”标签里的JSON');
        console.log(term_field.getValues());
        
        var huge_json = {};
        huge_json['tree'] = Ext.encode(tree_array);
        huge_json['info'] = info_field.getValues();
        huge_json['item_config'] = item_config_field.getValues();
        huge_json['item_fee'] = item_fee_field.getValues();
        huge_json['item_foot'] = item_foot_field.getValues();
        huge_json['term'] = term_field.getValues();
    },
    /**
     * 递归取得树中所有的元素数据
     * @param node
     * @param array
     */
    getAllNodes: function getNodesData(node, array) {
//        console.log(node.data);
        if(node.data['item_number'] != "") array.push(node.data);
        if(node.childNodes.length > 0) {
            for(var i = 0; i < node.childNodes.length; i++) {
                getNodesData(node.childNodes[i], array);
            }
        }
    },
    /**
     * 递归取得树中所有的节点
     * @param node
     * @param array
     */
    getAllChildrenNode: function getNodes(node, array) {
//        console.log(node.data);
        array.push(node);
        if(node.childNodes.length > 0) {
            for(var i = 0; i < node.childNodes.length; i++) {
                getNodes(node.childNodes[i], array);
            }
        }
    }
});