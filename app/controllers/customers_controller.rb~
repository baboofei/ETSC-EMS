class CustomersController < ApplicationController
    skip_before_filter :verify_authenticity_token

    #因为体现到ExtJS里，是要查名为GridCustomers的store与角色关联的数据，所以用grid_customers
    def get_grid_customers
        user_id = session[:user_id]
        limit = params[:limit].to_i
        start = params[:start].to_i
        filter = params[:filter]
        sort = params[:sort]
        target_store = action_name.camelize[3..-1]#根据方法名来取模型
        #target_model = eval(controller_name.singularize.camelize)
        #研究一下能不能提取“Customer”这个model，可能用不上
        #binding.pry

        customers = Customer.get_available_data(target_store, user_id).filter_by(filter).sort_by(sort)
binding.pry
        respond_to do |format|
            format.json {
                render :json => {
                    :customers => customers.limit(limit).offset(start.to_i).map{|p| p.for_grid_json(user_id)},
                    :totalRecords => customers.size
                }
            }
        end
    end

    #因为体现到ExtJS里，是要查名为MiniCustomers的store与角色关联的数据，所以用mini_customers
    def get_mini_customers
        user_id = session[:user_id]
        limit = params[:limit].to_i
        start = params[:start].to_i
        filter = params[:filter]
        sort = params[:sort]
        target_store = action_name.camelize[3..-1]#根据方法名来取模型

        #这里多一个过滤条件就是“归属于某销售个案”
        customers = Customer.in_salecase(params[:salecase_id]).get_available_data(target_store, user_id).filter_by(filter).sort_by(sort)

        respond_to do |format|
            format.json {
                render :json => {
                    :mini_customers => customers.limit(limit).offset(start.to_i).map{|p| p.for_mini_grid_json},
                    :totalRecords => customers.size
                }
            }
        end
    end

    #因为体现到ExtJS里，是要查名为Customers的store过滤出来的数据，所以用combo_customers
    def get_combo_customers
        #binding.pry
        #query = params[:query]
        customer_unit_id = params[:customer_unit_id]
        user_id = session[:user_id]
        target_store = action_name.camelize[3..-1]#根据方法名来取模型

        customers = Customer.get_available_data(target_store, user_id).in_unit(customer_unit_id)

        respond_to do |format|
            format.json {
                render :json => {
                    :customers => customers.map{|p| p.for_combo_json},
                    :totalRecords => customers.size
                }
            }
        end
    end

    def save_customer
        #binding.pry
        result = Customer.create_or_update_with(params, session[:user_id])

        render :json => {:success => result[:success], :message => result[:message]}
    end

    def share_to
        Customer.update_sharing_with(params)
        render :json => {:success => true}
    end

    def trans_to
        Customer.trans_to(params)
        render :json => {:success => true}
    end

    #在销售个案里加客户
    def save_customers_salecases
        Customer.save_customers_in_salecase(params, session[:user_id])
        render :json => {:success => true}
    end

    #在销售个案里减客户
    def delete_customers_salecases
        Customer.delete_customers_salecases(params, session[:user_id])
        render :json => {:success => true}
    end
end
