class QuotesController < ApplicationController
  before_filter :authorize, :time_zone_adjust
  skip_before_filter :verify_authenticity_token
  layout "basic"
  # GET /quotes
  # GET /quotes.xml
  def index
    @quotes = Quote.all

    respond_to do |format|
      format.html # index.html.erb
      format.xml  { render :xml => @quotes }
    end
  end

500  # GET /quotes/1
  # GET /quotes/1.xml
  def show
    @quote = Quote.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.xml  { render :xml => @quote }
    end
  end

  # GET /quotes/new
  # GET /quotes/new.xml
  def new
    @quote = Quote.new

    respond_to do |format|
      format.html # new.html.erb
      format.xml  { render :xml => @quote }
    end
  end

  # GET /quotes/1/edit
  def edit
    @quote = Quote.find(params[:id])
  end

  # POST /quotes
  # POST /quotes.xml
  def create
    @quote = Quote.new(params[:quote])

    respond_to do |format|
      if @quote.save
        format.html { redirect_to(@quote, :notice => 'Quote was successfully created.') }
        format.xml  { render :xml => @quote, :status => :created, :location => @quote }
      else
        format.html { render :action => "new" }
        format.xml  { render :xml => @quote.errors, :status => :unprocessable_entity }
      end
    end
  end

  # PUT /quotes/1
  # PUT /quotes/1.xml
  def update
    @quote = Quote.find(params[:id])

    respond_to do |format|
      if @quote.update_attributes(params[:quote])
        format.html { redirect_to(@quote, :notice => 'Quote was successfully updated.') }
        format.xml  { head :ok }
      else
        format.html { render :action => "edit" }
        format.xml  { render :xml => @quote.errors, :status => :unprocessable_entity }
      end
    end
  end

  # DELETE /quotes/1
  # DELETE /quotes/1.xml
  def destroy
    @quote = Quote.find(params[:id])
    @quote.destroy

    respond_to do |format|
      format.html { redirect_to(quotes_url) }
      format.xml  { head :ok }
    end
  end

  def gen_quote_paginate_json(start,limit,keyword,sort="id",dir="DESC")
    #生成报价列表的分页JSON
    quote_json=[]
    if sort.split(".").size > 1
      #如果按“.”分出来的数量大于1，说明带“.”，也就是带了跨表字段的名称传过来的，这里就用那个名称来排序
    else
      #否则的话，用quotes的字段
      sort = "quotes." + sort
    end

    if keyword.blank?
      #没有关键字，按角色分
      u = User.find(session[:user_id])
      if session[:user_id] == 1 or u.role_ids.include?(9) or u.role_ids.include?(6) or u.role_ids.include?(3) or u.role_ids.include?(4) or u.role_ids.include?(13)
        #如果是BOSS/Admin/商务/会计/出纳/技术助理，则能看全部
        total_records = Quote.all
        quotes = Quote.limit(limit.to_i).offset(start.to_i).order(sort + " " + dir)
      elsif u.role_ids.include?(1) and (u.role_ids.include?(2) or u.role_ids.include?(11))
        #如果是维修/销售经理，则能看自己和所管辖人(即同部门)发起的
        total_records = Quote.where("users.department_id = ?", u.department_id).includes(:sponsor)
        quotes = Quote.where("users.department_id = ?", u.department_id).includes(:sponsor).limit(limit.to_i).offset(start.to_i).order(sort + " " + dir)
      elsif u.role_ids.include?(2) or u.role_ids.include?(11)
        #如果是销售/技术，则看自己签订的
        total_records = Quote.where("sale_user_id = ?", session[:user_id])
        quotes = Quote.where("sale_user_id = ?", session[:user_id]).limit(limit.to_i).offset(start.to_i).order(sort + " " + dir)
      else
        #其它人不看
        total_records = []
        quotes = []
      end
    else
      #先把关键字按空格切分，全角半角都算，取前五个
      keywords = keyword.split("　").join(" ").split(" ")[0..4]
      #如果关键字中有一个“+”，则按and来计算，否则就算or
      if keywords.index("+")
        joint = "and"
        keywords = keywords-["+"]
      else
        joint = "or"
      end
      #参与查找的字段
      columns = %w(quote_number summary customer_number sum rmb remark)
      fore_conditions_keyword = []#按关键字再循环后的数组
      back_conditions = []
      #先对关键字循环
      for i_keyword in keywords
        #再对字段循环
        fore_conditions_column = []#按字段循环后的数组
        for column in columns
          fore_conditions_column << "quotes."+column+" like ?"#这里需要注意，带“表名”，为避免多表里有重名字段要特别标记之
          back_conditions << "%"+i_keyword+"%"
        end
        #以下是跨表字段，单独写
        fore_conditions_column << "customer_units.name like ?"
        back_conditions << "%"+i_keyword+"%"
        fore_conditions_column << "customers.name like ?"
        back_conditions << "%"+i_keyword+"%"
        fore_conditions_column << "business_units.name like ?"
        back_conditions << "%"+i_keyword+"%"
        fore_conditions_column << "business_contacts.name like ?"
        back_conditions << "%"+i_keyword+"%"
        fore_conditions_column << "users.real_name like ?"
        back_conditions << "%"+i_keyword+"%"
        fore_conditions_column << "currencies.name like ?"
        back_conditions << "%"+i_keyword+"%"

        fore_condition_column = "(" + fore_conditions_column.join(" or ") + ")"#这一层全是or，因为是针对每个字段
        fore_conditions_keyword << fore_condition_column
      end
      fore_condition = fore_conditions_keyword.join(" "+joint+" ")#好像用不着这个→20111017 + " and (" + origin_conditions + ")"
      conditions = fore_condition.to_a + back_conditions
      #要includes的表先列出来
      included_table_array = [
        :customer_unit,
        :equiper,
        #:buyer，这个不查了
        :business_unit,
        :business_contact,
        :sponsor,
        :currency
      ]
      #也按角色分
      u = User.find(session[:user_id])
      if session[:user_id] == 1 or u.role_ids.include?(9) or u.role_ids.include?(6) or u.role_ids.include?(3) or u.role_ids.include?(4) or u.role_ids.include?(13)
        #如果是BOSS/Admin/商务/会计/出纳/技术助理，则查关键字后列全部
        total_records = Quote.where(*conditions).includes(included_table_array)
        quotes = Quote.where(*conditions).includes(included_table_array).limit(limit.to_i).offset(start.to_i).order(sort + " " + dir)
      elsif u.role_ids.include?(1) and (u.role_ids.include?(2) or u.role_ids.include?(11))
        #如果是维修/销售经理，则查关键字后列自己和所管辖人(即同部门)签订的
        fore_condition += " and users.department_id = ?"
        back_conditions << u.department_id
        conditions = fore_condition.to_a + back_conditions
        total_records = Quote.where(*conditions).includes(included_table_array)
        quotes = Quote.where(*conditions).includes(included_table_array).limit(limit.to_i).offset(start.to_i).order(sort + " " + dir)
      elsif u.role_ids.include?(2) or u.role_ids.include?(11)
        fore_condition += " and sale_user_id = ?"
        back_conditions << session[:user_id]
        conditions = fore_condition.to_a + back_conditions
        #如果是销售/技术，则查关键字后列自己签订的
        total_records = Quote.where(*conditions).includes(included_table_array)
        quotes = Quote.where(*conditions).includes(included_table_array).limit(limit.to_i).offset(start.to_i).order(sort + " " + dir)
      else
        #其它人不看
        total_records = []
        quotes = []
      end

    end
    for quote in quotes
      quote_json << gen_etsc_quote_json(quote)
    end
#    if keyword.blank?
#      #没有关键字，总记录数取整个产品表
#      {"totalRecords" => Quote.count.to_s, "root" => quote_json}
#    else
      #有关键字，总记录数取查找结果
      {"totalRecords" => total_records.size.to_s, "data" => quote_json}
#    end
  end

  def restful
    if request.get?
      #查
      respond_to do |format|
        format.json {
          if params[:sort].nil?
            #如果没有在表格里排序，则没有参数传回来，不管，就相当于用默认的ID降序排
            quote_json = gen_quote_paginate_json(params[:start],params[:limit],params[:keyword])#,params[:sort],params[:dir])
          else
            #如果表格里有排序，会传过来类似"[{\"property\":\"mobile\",\"direction\":\"ASC\"}]"的参数
            sort_param_hash = JSON.parse(params[:sort])
            sort = sort_param_hash[0]["property"]
            #用了别称的字段，要这样转回去。跨表的记得带上表的名字
            sort = "sale_user_id" if sort == "sponsor"
            sort = "customer_unit_id" if sort == "customer_unit"
            sort = "equiper_customer_id" if sort == "equiper_customer"
            sort = "business_contact_id" if sort == "business_contact"
            dir = sort_param_hash[0]["direction"]
            quote_json = gen_quote_paginate_json(params[:start],params[:limit],params[:keyword],sort,dir)
          end
          render :text => quote_json.to_json
        }
      end
    elsif request.put?
      #改
      data = params["data"]
      quote_id = data["id"]
      quote = Quote.find(quote_id)

      # binding.pry
      # data["term"] = (data["term"] ? JSON.parse(data["term"]) : {})

      if data["term"]
        # 如果传了term，则把它解析成Hash
        data["term"] = JSON.parse(data["term"])
        # 几种情况：
        # 传了城市ID => 是数字 -> 用此ID
        #   => 传了城市名称 => 在城市表中找 => 找到 -> 则用此ID
        #     -> 用客户单位所在城市ID
        # 没传城市ID -> 用客户单位所在城市ID
        unless data["term"]["city_of_term"].blank?
          if data["term"]["city_of_term"].to_i == data["term"]["city_of_term"]
            city_id = data["term"]["city_of_term"]
          else
            cities = City.where("name like ?", "%" + data["term"]["city_of_term"].to_s + "%")
            if cities.size > 0
              city_id = cities.map{|p| [p.name, p.id]}.sort[0][1]
            else
              city_id = quote.customer_unit.city_id
            end
          end
        else
          city_id = quote.customer_unit.city_id
        end
        data["term"]["city_of_term"] = city_id
      else
        # 如果没传term，则沿用以前的term
        data["term"] = JSON.parse(quote.term)
        city_id = data["term"]["city_of_term"]
      end
      #处理完毕，新增json、砍多余字段
      quote_json = []
      data.delete("id")
      data.delete("quote_item_ids")#这个在报价项修改时已经存过了对应关系，这里删掉，不然会只认第一项
      data.delete("city_of_term")

      # 还是要存成JSON字符串
      require "json"
      data["term"] = data["term"].to_json
      # 这里有时候传不过data["total"]的值来，所以要手动加一下。原因很复杂，大致就是没改动过的字段不传之类，索性手写了
      unless data["total"]
        # 很奇怪，没有这个值的话，quote.total.to_f必然不对，于是用它重新算
        # binding.pry
        data["total"] = (quote.total.to_f + quote.fif.to_f - quote.total_discount.to_f) * (quote.vat == 1 ? 1.17 : 1.0) * (1 + Product.where("quote_id = ?", quote.id).joins(:quote_items => {:quote_block => :quote}).map{|p| p.custom_tax.to_f}.max * 0.01) + quote.other_cost.to_f
      end

      #保存
      if quote.update_attributes(data)
        data["id"] = quote_id
#        gen_quote_pdf(data["id"])
        quote_json << gen_etsc_quote_json(quote)
        render :text => {"success" => true, "message" => "已修改", "data" => quote_json}.to_json
      else
        render :text => {"success" => false, "message" => "修改出错", "data" => quote_json}.to_json
      end
    elsif request.post?
      #增
      data = params["data"]
      #传来的字符串留着备用
      temp_quote_item_ids = data["quote_item_ids"].split("|")
      #如果传来的是城市名称，则在城市表中换成对应的ID，找不到的城市换成空串
      # binding.pry
      unless data["city_of_term"].blank?
        cities = City.where("name like ?", "%" + data["city_of_term"] + "%")
        if cities.size > 0
          city_id = cities.map{|p| [p.name, p.id]}.sort[0][1]
          data["term"].sub!(/^.*?\$\$/, city_id.to_s + "$$")
        else
          data["term"].sub!(/^.*?\$\$/, "$$")
        end
      end
      data.delete("city_of_term")
      #处理完毕，新增json、砍多余字段
      quote_json = []
      data.delete("quote_item_ids")#这个在报价项修改时已经存过了对应关系，这里删掉，不然要转换，麻烦
      data.delete("sponsor")
      data.delete("our_company")

      #如果没有完成状态，则默认为1(未完成)
      data["status"] = 1 if data["status"].blank?
      data.delete("customer_unit")
      data.delete("customer")
      data.delete("currency")
      data.delete("fif_currency")
      data["quote_number"] = Quote.next_number

      if data["fif_currency_id"].blank?
        #没有运保费币种
        if data["currency_id"].blank?
          #如果连报价币种也没有，说明是前台页面bug，手动给二者各赋一个值
          data["currency_id"] = 0
          data["fif_currency_id"] = 1
        else
          #如果有报价币种，则运保费币种等于报价币种
          data["fif_currency_id"] = data["currency_id"]
        end
      end
      quote = Quote.new(data)
      quote.save
      if temp_quote_item_ids.size > 0
        #感觉这里可以不判断，没有报价项怎么可能提交。但又怕前台少判断就提交了，暂留。
        if temp_quote_item_ids.join("|").match(/B/).blank?
          #如果传来的串里全部是“I”的话，说明不是系统报价(因为前台要判断的，是系统报价&&B的数量小于2不给提交)
          #因为不是系统报价，只有一个报价块
#          quote_block = QuoteBlock.new()
#          quote_block.quote_id = quote.id
#          quote_block.currency_id = quote.currency_id
#          quote_block.save
          #然后把“I”扔掉
          temp_quote_item_ids = temp_quote_item_ids.map{|p| p[1..-1]}
          #从session判断是否临时
          quote_item_0 = QuoteItem.find(temp_quote_item_ids[0])
          if quote_item_0.session
            #有session，说明是临时，它们所属的报价块就是跟它同session那个报价块
            #此报价块归属于当前报价
            quote_block = QuoteBlock.where("session = ?", quote_item_0.session)[0]
            quote_block.quote_id = quote.id
            quote_block.currency_id = quote.currency_id
            quote_block.session = nil
            quote_block.save
            #把这些报价项的session删掉，都归到此block里去
            QuoteItem.where("id" => temp_quote_item_ids).map do |p|
              p.session = nil
              p.quote_block_id = quote_block.id
              p.save
            end
          else
            #无session，说明是有主的，则连quote_block带quote_item复制一份给别人，转所属报价
            #注意，如果要从旧报价复制出一份新报价来的话，需要先“保存为新报价”再改，不然会多一份
            quote_block = quote_item_0.quote_block
            attributes = quote_block.attributes
            new_quote_block = QuoteBlock.new(attributes)
            new_quote_block.quote_id = quote.id
            new_quote_block.save

            QuoteItem.where("id" => temp_quote_item_ids).map do |p|
              attributes = p.attributes
              new_quote_item = QuoteItem.new(attributes)
              new_quote_item.quote_block_id = new_quote_block.id
              new_quote_item.save
            end
          end
        else
          #传来的串里有“I”有“B”，说明是系统报价
#          #然后把“B”和“I”都扔掉
#          temp_quote_item_ids = temp_quote_item_ids.map{|p| p[1..-1]}
          #从session判断是否临时
          quote_block_0 = QuoteBlock.find(temp_quote_item_ids[0][1..-1])#因为第一项必然是“B”才能提交过来
          if quote_block_0.session
            #有session，说明是临时
            #把所有session都删掉，挨个儿归到各自的报价/报价块名下
            for item in temp_quote_item_ids
              if item =~ /B/
                #如果是”B“，则取此块的id备下面的用
                quote_block = QuoteBlock.find(item[1..-1])
                quote_block.session = nil
                quote_block.quote_id = quote.id
                quote_block.save
              else
                #如果是“I”，则用上面的那个quote_block的id(反正“I”不会出现在第一个)
                quote_item = QuoteItem.find(item[1..-1])
                quote_item.session = nil
                quote_item.quote_block_id = quote_block.id
                quote_item.save
              end
            end
          else
            #无session，说明是有主的，则复制一份给别人，转所属报价
            for item in temp_quote_item_ids
              if item =~ /B/
                #如果是”B“，则取此块的id备下面的用
                quote_block = QuoteBlock.find(item[1..-1])
                attributes = quote_block.attributes
                new_quote_block = QuoteBlock.new(attributes)
                new_quote_block.quote_id = quote.id
                new_quote_block.save
              else
                #如果是“I”，则用上面的那个quote_block的id(反正“I”不会出现在第一个)
                quote_item = QuoteItem.find(item[1..-1])
                attributes = quote_item.attributes
                new_quote_item = QuoteItem.new(attributes)
                new_quote_item.quote_block_id = new_quote_block.id
                new_quote_item.save
              end
            end
          end
        end
      end

      data["id"] = quote.id
      quote_json << gen_etsc_quote_json(quote)
      render :text => {"success" => true, "message" => "已新建", "data" => quote_json}.to_json
    end
  end

  #自定义生成所需字段的json，给“增”“改”“查”用
  def gen_etsc_quote_json(quote)
#    quote.business_unit ? (business_unit, business_unit_id = quote.business_unit.name, quote.business_unit.id) : (business_unit, business_unit_id = nil, nil)
    if quote.currency_id == 1
      currency, currency_id = "混合/不计", 1
    else
      if quote.currency
        currency, currency_id = quote.currency.name, quote.currency.id
      else
        currency, currency_id = nil, nil
      end
    end
    quote.fif_currency ? (fif_currency, fif_currency_id = quote.fif_currency.name, quote.fif_currency.id) : (fif_currency, fif_currency_id = "", nil)
    #虽然下面这项是必填，但还是判断一下吧
    quote.sponsor ? (sponsor, sale_user_id = quote.sponsor.real_name, quote.sponsor.id) : (sponsor, sale_user_id = "", nil)
    quote.our_company ? (our_company, our_company_id = quote.our_company.shown_name, quote.our_company.id) : (our_company, our_company_id = nil, nil)
#    #这个要体现两层的关系，最后出来的字符串是"1:1~2~3|2:4~5"这样的形式
#    quote_blocks = quote.quote_blocks.map{|p| p.id}
#    quote_item_arr = []
#    for quote_block in quote_blocks
#      quote_items = QuoteBlock.find(quote_block).quote_items.map{|p| p.id}
#      quote_item_arr << quote_block.to_s + ":" + quote_items.join("~")
#    end
#    quote_item_str = quote_item_arr.join("|")
#----为什么要这样体现两层的关系？直接“B1|I1|I2|B2|I17”这样不行吗？
    quote_blocks = quote.quote_blocks.map{|p| p.id}
    quote_item_arr = []
    for quote_block in quote_blocks
      quote_item_arr << "B" + quote_block.to_s
      quote_items = QuoteBlock.find(quote_block).quote_items.map{|p| "I" + p.id.to_s}.join("|")
      quote_item_arr << quote_items
    end
    quote_item_str = quote_item_arr.join("|")
    
    # binding.pry
    if(quote.term.class.name == "String")
      quote_city_id = JSON.parse(quote.term)["city_of_term"]
    else
      quote_city_id = quote.term["city_of_term"]
    end
    if quote.term.blank? || quote_city_id.blank?
      #如果没有条款，或者条款里没有城市信息，则用客户单位的城市信息
      city_of_term = quote.customer_unit.city.name.split("市")[0]#只取第一级，地级市没有进出口权……
    else
      if quote_city_id.to_i == quote_city_id
        #如果是数字，则在City表中查id
        city_of_term = City.find(quote_city_id).name.split("市")[0]
      else
        #还有可能是汉字，那么在City表中查name
        city_of_term = City.where("name like ?", "%" + quote_city_id + "%")[0].name.split("市")[0]
      end
    end
    # binding.pry
    {
      "quote_number" => quote.quote_number,
      "sponsor" => sponsor,
      "sale_user_id" => sale_user_id,
      "our_company" => our_company,
      "our_company_id" => our_company_id,
      "customer_unit" => quote.customer_unit.name,
      "customer_unit_id" => quote.customer_unit.id,
      "customer" => quote.customer.name,
      "customer_id" => quote.customer.id,
      "status" => quote.status,
      "total" => quote.total.to_s,
      "currency" => currency,
      "currency_id" => currency_id,
      "quote_format" => quote.quote_format,
      "language" => quote.language,
      "request" => quote.request,
      "vat" => quote.vat,
      "other_cost" => quote.other_cost,
      "fif_currency" =>fif_currency,
      "fif_currency_id" =>fif_currency_id,
      "fif" => quote.fif,
      "total_discount" => quote.total_discount,
      "remark" => quote.remark,
      "id" => quote.id,
      "quote_item_ids" => quote_item_str,
      "term" => quote.term,
      "city_of_term" => city_of_term,
      "status" => quote.status.to_s
    }
  end

  def gen_quote_pdf
    # binding.pry
    quote = Quote.find(params["quote_id"])
    price_type_array = %w(到岸价 离岸价 出厂价 到货价 完税后交货 未完税交货)
    price_type_array_en = %w(CIF FOB Ex-works DDP DDP DDU)
    pay_time_array = pay_time_array_en = %w(7 10 15 30 60 90 180)
    pay_way_array = %w(信用证(L/C) 电汇(T/T))
    pay_way_array_en = %w(L/C T/T)
    pay_unit_hash = pay_unit_hash_en = {}
    Currency.all.each do |p|
      pay_unit_hash[p.id] = p.name
      pay_unit_hash_en[p.id] = p.name
    end
    cad_left_via_array = %w(验收合格后凭验收报告议付 凭其余发货单据议付)
    cad_left_via_array_en = ["the Certificate of Acceptance", "the rest shipping documents"]
    receipt_array = %w(不含税，如需开具发票则需另收相应发票税 含普通发票税 含增值税发票税)
    delivery_point_array = %w(收到预付款后 签订报价后 收到信用证后)
    delivery_point_array_en = ["after receipt of the payment", "after signing the contract", "after receipt of the L/C"]#我恨空格
    deliver_time_unit_array = %w(周 个月)
    deliver_time_unit_array_en = %w(week(s) month(s))
    warranty_point_array = %w(发货后 到货后 验收后)
    warranty_point_array_en = ["after shipping out the goods", "after the goods arrival at the destination", "after the acceptance"]
    warranty_time_array = warranty_time_array_en = %w(12 13 24 36)

    ############################################################################
    #    自定义存储时的顺序
    #    city_of_term(city_id)          price_type_of_term(1,price_type_array)
    #    pay_time1(3,pay_time_array)   pay_way1(1,pay_way_array)    pay_count1(100)    pay_unit1(1,pay_unit_hash)
    #      cad_count(90)      cad_unit(1,pay_unit_hash)        cad_left_count(10)      cad_left_unit(1,pay_unit_hash)     cad_left_via(1,cad_left_via_array_en)
    #    pay_time2(3,pay_time_array)   pay_count2(100)    pay_unit2(1,pay_unit_hash)
    #      pay_time3(3,pay_time_array)   pay_count3(100)    pay_unit3(1,pay_unit_hash)
    #    pay_time4(3,pay_time_array)   pay_count4(100)    pay_unit4(1,pay_unit_hash)
    #      pay_count5(100)        pay_unit5(1,pay_unit_hash)
    #      pay_unit6(1,pay_unit_hash)   pay_count6(100)
    #    is_include_tax(true/false)    receipt(1,receipt_array)
    #    is_delivery(true/false)       delivery_point(1,delivery_point_array)   deliver_time_from(12)   deliver_time_to(24)   deliver_time_unit(1,deliver_time_unit_array)
    #      fes_xmas(true/false)   fes_newy(true/false)    fes_sprg(true/false)
    #    is_warranty(true/false)       warranty_point(1,warranty_point_array)   warranty_time(1,warranty_time_array)    extra_warranty(还有啥奇怪的质保条款都写过来吧，注意中英文。没有就空着)
    #    need_disassemble(true/false)
    #    need_on-site(true/false)     pay_unit7(1,pay_unit_hash)    pay_count7(100)
    #    is_special_discount(true/false)    is_discount_limit(true/false)
    #    valid_time(20100630)
    #    extra_term(请输入自定义条款)
    #    does_display_block_amount(true/false)    does_display_block_discount_col(true/false)    does_display_item_amount(true/false)    does_display_item_discount_col(true/false)
    #    has_detail_in_sum(true/false)    has_summary_in_sum(true/false)    does_count_ctvat(true/false)
    ############################################################################
    term = JSON.parse(quote.term)#.split("$$")
    pdf_font = "public/fonts/yahei_mono.ttf"
    #根据这些条款来生成PDF
    require "prawn"
    Prawn::Document.generate("public/files/quotation/#{quote.quote_number}.pdf", :margin => [20, 20]) do
      font pdf_font, :size => 11

      #先是左上角客户方信息
      if quote.language == 1
        customer_info =  "单位：" + quote.customer_unit.name + "\n"
        customer_info += "收件人：" + quote.customer.name + "\n"
        customer_info += "电话：" + ((quote.customer.phone.blank?)? "" : quote.customer.phone.split(",")[0]) + "\n"
        customer_info += "传真：" + ((quote.customer.fax.blank?)? "" : quote.customer.fax)
      else
        customer_info =  "To: " + quote.customer_unit.en_name + "\n"
        customer_info += "Attn: " + ((quote.customer.en_name.blank?)? quote.customer.name : quote.customer.en_name) + "\n"
        customer_info += "Tel: " + ((quote.customer.phone.blank?)? "" : quote.customer.phone.split(",")[0]) + "\n"
        customer_info += "Fax: " + ((quote.customer.fax.blank?)? "" : quote.customer.fax) + "\n"
        customer_info += "Cell: " + ((quote.customer.mobile.blank?)? "" : quote.customer.mobile.split(",")[0])
      end
      bounding_box [0, 750], :width => 220 do
        text customer_info, :leading => 4
      end

      #再是右上角我们公司的信息
      if quote.language == 1
        our_company = "来自：" + quote.our_company.name + "\n"
        our_company += "地址：" + quote.our_company.addr + "\n"
        our_company += "电话：" + quote.our_company.phone + "\n"
        our_company += "传真：" + quote.our_company.fax || ""
      else
        our_company = "From: " + quote.our_company.en_name + "\n"
        our_company += "Addr: " + quote.our_company.en_addr + "\n"
        our_company += "Tel: " + quote.our_company.phone + "\n"
        our_company += "Fax: " + quote.our_company.fax || ""
      end
      bounding_box [340, 750], :width => 220 do
        text our_company, :leading => 4
      end

      #标题
      move_down 20
      text quote.language == 1 ? "报价单" : "QUOTATION", :align => :center, :size => 25.5
      # text ((quote.language == 1) ? "报价单" : "QUOTATION"), :align => :center, :size => 25.5

      #右边报价编号和日期信息
      info = []
      if quote.language == 1
        info << ["", "编号："+quote.quote_number]
        info << ["", "日期："+quote.updated_at.strftime("%Y年%m月%d日")]
      else
        # binding.pry
        info << ["", "Number: "+quote.quote_number]
        info << ["", "Date: "+quote.updated_at.strftime("%d-%b-%y")]
      end
      #          bounding_box [440, 620], :width => 220 do
      #            text info, :leading => 4
      #          end
      #
      table(info,
        :column_widths => {0 => 500, 1 => 180},
        :cell_style => {:padding => 3}
      ) do |t|
        t.cells.style do |cell|
          cell.borders -= [:left, :right, :top, :bottom]#非要这样写才行，而不能直接写=[]
        end
      end

      move_down 5
      text quote.language == 1 ? "根据您的需求，我们特提供报价如下：" : "Regarding to your request, we are pleasure inform you as follows: "
      # text ((quote.language == 1) ? "根据您的需求，我们特提供报价如下：" : "Regarding to your request, we are pleasure inform you as follows: ")

      move_down 5
      #          不用对齐了，不算这块
      #          if quote.currency_id != 0
      #            #币种不为“混合”时，有报价总价，而且总价的位数是最长的
      #            max_length = sprintf("%.2f",quote.total).to_s.size
      #          else
      #            #币种为“混合”时，只能对报价项循环，看哪个总价最长
      #            quote_item_array = SellQuoteItem.find(:all, :conditions => ["quote_block_id = 1 or quote_id = 16"], :include => [:quote_block])
      #            #如果是带关税计算，则以discount_to来比较，如果不是，则以单价*数量来比较
      #            if quote.has_custom_tax
      #              target_array = quote_item_array.map{|p| p.discount_to}
      #            else
      #              target_array = quote_item_array.map{|p| p.discounted_unit_price * p.product_quantity}
      #            end
      #          end
      font(pdf_font, :size => 8) do
        #上面的各项细节列表
        quote_table = []
        quote_blocks = quote.quote_blocks.order("inner_order")

        if quote.quote_format == 4
          #如果报价类型是“阶梯报价”，则只显示折后单价(币种换算)
          #先对报价块信息循环
          quote_blocks.each_with_index do |sqb, index_b|
            # if sqb.quote.currency_id == 0 && sqb.currency_id == 0
            #   #如果报价本身的币种是“混合”，报价块的币种也是“混合”，那么单价就不写
            #   unit_price = ""
            #   discount_to = ""
            # else
            #   #否则说明此报价块下的报价项币种统一，那么还是写上一个单价
            #   unit_price = sqb.currency.name.to_s + sprintf("%.2f",sqb.unit_price.to_f)
            #   discount_to = sqb.currency.name.to_s + sprintf("%.2f",sqb.discount_to.to_f)
            # end
            # 再对报价项信息循环
            quote_items = sqb.quote_items.order("inner_order")
            quote_items.each_with_index do |sqi, index_i|
              #每一个把对应信息提取出来写到表格数组里
              quote_table << [(index_b+1).to_s+"-"+(index_i+1).to_s, sqi.product.model.to_s, sqi.parameter, sqi.product_quantity.to_s+"~"+sqi.product_quantity_2.to_s, sqi.discounted_currency.nil? ? "--" : (sqi.discounted_currency.name.to_s + sprintf("%.2f",sqi.discounted_unit_price.to_f))]
            end
          end
          if quote.language == 1
            header = %w(项目 型号 参数 数量 单价)
          else
            header = %w(Item Model Parameter Qty)
            header << "Unit Price"
          end
          table([header]+quote_table,
            :cell_style => {:inline_format => true },
            :header => true,
            :column_widths => {0 => 50, 1 => 100, 2 => 260, 3 => 50, 4 => 100}
          ) do |t|
            t.column(0).style :align => :left
            t.column(3).style :align => :center
            t.column(4).style :align => :right, :font => pdf_font
            t.row(0).style :background_color => 'AAAAAA', :text_color => 'FFFFFF', :align => :center, :size => 11, :font => pdf_font
            0.upto(quote_table.length-1) do |i|#这个长度关系……+1和-1
              t.rows(i+1).columns(0..4).background_color = ((quote_table[i][0].index("-").nil?) ? "EEEEEE" : "FFFFFF")
            end
          end
        elsif quote.quote_format == 2
          # 如果报价类型是“单项折扣”，则要显示“单价”、“折后单价”、“折后总价”

          quote_blocks.each_with_index do |sqb, index_b|
            quote_items = sqb.quote_items.order("inner_order")
            quote_items.each_with_index do |sqi, index_i|
              #每一个把对应信息提取出来写到表格数组里
              # unit_price = 
              # binding.pry
              unit_price = sqi.currency.name + sprintf("%.2f", sqi.unit_price.to_f)
              discounted_unit_price = sqi.discounted_currency.nil? ? "--" : (sqi.discounted_currency.name + sprintf("%.2f", sqi.discounted_unit_price.to_f))
              extension = sqi.discounted_currency.nil? ? "--" : (sqi.discounted_currency.name.to_s + sprintf("%.2f",sqi.discount_to.to_f))
              quote_table << [(index_b+1).to_s+"-"+(index_i+1).to_s, sqi.product.model.to_s, sqi.parameter, sqi.product_quantity.to_s, unit_price, discounted_unit_price, extension]
            end
          end
          if quote.language == 1
            header = %w(项目 型号 参数 数量 单价 折后单价 折后总价)
          else
            header = %w(Item Model Parameter Qty)
            header << "Unit Price"
            header << "Discount Price"
            header << "Extension"
          end
          table([header]+quote_table,
            :cell_style => {:inline_format => true },
            :header => true,
            :column_widths => {0 => 50, 1 => 100, 2 => 260, 3 => 50, 4 => 100, 5 => 100, 6 => 100}
          ) do |t|
            t.column(0).style :align => :left
            t.column(3).style :align => :center
            t.column(4..6).style :align => :right, :font => pdf_font
            t.row(0).style :background_color => 'AAAAAA', :text_color => 'FFFFFF', :align => :center, :size => 11, :font => pdf_font
            0.upto(quote_table.length-1) do |i|#这个长度关系……+1和-1
              t.rows(i+1).columns(0..6).background_color = ((quote_table[i][0].index("-").nil?) ? "EEEEEE" : "FFFFFF")
            end
          end
        else
          #先对报价块信息循环
          quote_blocks.each_with_index do |sqb, index_b|
            #                p sqb
            if sqb.quote.currency_id == 0 && sqb.currency_id == 0
              #如果报价本身的币种是“混合”，报价块的币种也是“混合”，那么单价就不写
              unit_price = ""
              discount_to = ""
            else
              #否则说明此报价块下的报价项币种统一，那么还是写上一个单价
              # 判断是否有“显示系统价格”的勾选
              # binding.pry
              if term["does_display_block_amount"]
                # 有的话才显示出来
                unit_price = sqb.discounted_currency.name.to_s + sprintf("%.2f", sqb.discounted_unit_price.blank? ? sqb.discounted_unit_price.to_f : sqb.discounted_unit_price.to_f)
              else
                unit_price = ""
              end
              #好像新增一个标准报价的时候discounted_unit_price是空的，所以判断一下
              discount_to = sqb.discounted_currency.name.to_s + sprintf("%.2f",sqb.discount_to.to_f)
            end
            #每一个把对应信息提取出来写到表格数组里
            if quote.quote_format == 3
              #系统报价的时候才写报价块对应的行，别的情况不能写，写了居然会因为带有nil而不执行
              if term["does_display_block_discount_col"] || term["does_display_item_discount_col"]
                # 如果有“显示系统折扣栏”或者“显示系统中产品折扣栏”的勾选，要多一栏“折扣”内容
                quote_table << [(index_b+1).to_s, sqb.description, sqb.parameter, sqb.quantity.to_s, unit_price, "", discount_to]
              else
                # 如果没勾选，没有“折扣”
                quote_table << [(index_b+1).to_s, sqb.description, sqb.parameter, sqb.quantity.to_s, unit_price, discount_to]
              end
            # else
              # 不是系统报价也没“折扣”
              # quote_table << [(index_b+1).to_s, sqb.description, sqb.parameter, sqb.quantity.to_s, unit_price, discount_to]
            end
            #再对报价项信息循环
            quote_items = sqb.quote_items.order("inner_order")
            if quote.quote_format == 3
              # binding.pry
              if term["does_display_block_discount_col"] || term["does_display_item_discount_col"]
                # 如果有“显示系统折扣栏”或者“显示系统中产品折扣栏”的勾选，要多一栏“折扣”内容
                quote_items.each_with_index do |sqi, index_i|
                  discount_to = sqi.discounted_currency.nil? ? "--" : (sqi.discounted_currency.name.to_s + sprintf("%.2f",sqi.discount_to.to_f))
                  # binding.pry
                  if term["does_display_item_amount"]
                    # 如果勾选“显示系统中产品价格”，则显示价格
                    unit_price = sqi.discounted_currency.name.to_s + sprintf("%.2f",sqi.discounted_unit_price.to_f)
                  else
                    unit_price = ""
                  end
                  if term["does_display_item_discount_col"]
                    # 如果有“显示系统中产品折扣”栏，则计算被折扣掉的价钱，写上
                    discounted = sqi.discounted_currency.nil? ? "--" : (sqi.discounted_currency.name.to_s + sprintf("%.2f", (sqi.unit_price.to_f * sqi.product_quantity * sqi.currency.exchange_rate.to_f / 100) - sqi.discount_to.to_f))
                    # binding.pry
                  else
                    # 如果没有则显示空栏
                    discounted = ""
                  end
                  #也每一个把对应信息提取出来写到表格数组里
                  quote_table << [(index_b+1).to_s+"-"+(index_i+1).to_s, sqi.product.model.to_s, sqi.parameter, sqi.product_quantity.to_s, unit_price , discounted, discount_to]
                end
              else
                quote_items.each_with_index do |sqi, index_i|
                  # 没勾选，没有“折扣”
                  if term["does_display_item_amount"]
                    # 如果勾选“显示系统中产品价格”，则显示价格
                    unit_price = sqi.discounted_currency.name.to_s + sprintf("%.2f",sqi.discounted_unit_price.to_f)
                  else
                    unit_price = ""
                  end
                  
                  #也每一个把对应信息提取出来写到表格数组里
                  quote_table << [(index_b+1).to_s+"-"+(index_i+1).to_s, sqi.product.model.to_s, sqi.parameter, sqi.product_quantity.to_s, unit_price, sqi.discounted_currency.nil? ? "--" : (sqi.discounted_currency.name.to_s + sprintf("%.2f",sqi.discount_to.to_f))]
                end
              end
            else
              # 不是系统报价也没“折扣”
              quote_items.each_with_index do |sqi, index_i|
                #也每一个把对应信息提取出来写到表格数组里
                quote_table << [(index_b+1).to_s+"-"+(index_i+1).to_s, sqi.product.model.to_s, sqi.parameter, sqi.product_quantity.to_s, sqi.discounted_currency.name.to_s + sprintf("%.2f",sqi.discounted_unit_price.to_f), sqi.discounted_currency.nil? ? "--" : (sqi.discounted_currency.name.to_s + sprintf("%.2f",sqi.discount_to.to_f))]
              end
            end
          end
          # binding.pry
          if quote.quote_format == 3
            # 是系统报价的时候，根据那四个checkbox来决定表头结构： does_display_block_amount does_display_block_discount_col does_display_item_amount does_display_item_discount_col
            if term["does_display_block_discount_col"] || term["does_display_item_discount_col"]
              # 如果有“显示系统折扣栏”或者“显示系统中产品折扣栏”的勾选
              if quote.language == 1
                header = %w(项目 型号 参数 数量 单价 折扣 小计)
              else
                header = %w(Item Model Parameter Qty)
                header << "Unit Price"
                header << "Discount"
                header << "Sub-total"
              end
              column_widths = {0 => 50, 1 => 100, 2 => 260, 3 => 50, 4 => 100, 5 => 100, 6 => 120}
            else
              # 没有勾选这两项的话，表头没有“折扣”栏
              if quote.language == 1
                header = %w(项目 型号 参数 数量 单价 小计)
              else
                header = %w(Item Model Parameter Qty)
                header << "Unit Price"
                header << "Sub-total"
              end
              column_widths = {0 => 50, 1 => 100, 2 => 260, 3 => 50, 4 => 100, 5 => 120}
            end
          else
            # 不是系统报价的时候表格结构是固定的
            if quote.language == 1
              header = %w(项目 型号 参数 数量 单价 小计)
            else
              header = %w(Item Model Parameter Qty)
              header << "Unit Price"
              header << "Sub-total"
            end
            column_widths = {0 => 50, 1 => 100, 2 => 260, 3 => 50, 4 => 100, 5 => 120}
          end

          # binding.pry
          table([header]+quote_table,
            :cell_style => {:inline_format => true },
            :header => true,
            :column_widths => column_widths
          ) do |t|
            t.column(0).style :align => :left
            t.column(3).style :align => :center
            t.column(4..6).style :align => :right, :font => pdf_font
            t.row(0).style :background_color => 'AAAAAA', :text_color => 'FFFFFF', :align => :center, :size => 11, :font => pdf_font
            0.upto(quote_table.length-1) do |i|#这个长度关系……+1和-1
              t.rows(i+1).columns(0..6).background_color = ((quote_table[i][0].index("-").nil?) ? "EEEEEE" : "FFFFFF")
            end
          end

        end
        # binding.pry
        #下面的合计表，没办法colspan，只能这样子了，注意第0栏的宽度应该比上面那些的宽度加起来略大一点(可能是表格边线宽度)
        sum_table = []
        if term["does_show_final_price_only"]
          #勾选了“仅显示最终价”这个最大
          sum_table << [(quote.language == 1) ? "总价：" : "Final Price: ", quote.currency.name + sprintf("%.2f",quote.total.to_f)]
          if quote.quote_format == 4
            column_set = [460, 100]
          else
            column_set = [570, 120]
          end

          table(sum_table,
            :column_widths => {0 => column_set[0], 1 => column_set[1]},
            :cell_style => {:padding => 3}
          ) do |t|
            t.cells.style do |cell|
              cell.borders -= [:top] unless cell.row == 0
              cell.borders -= [:bottom] unless cell.row == sum_table.length - 1
              cell.align = :right
            end
            t.column(0..1).style do |c|#两列右对齐
              c.align = :right
            end
            t.column(0).style do |c|#左列无右框
              c.borders -= [:right]
            end
            t.column(1).style do |c|#右列无左框
              c.borders -= [:left]
            end
          end
        else
          if quote.currency_id != 0 && term["has_detail_in_sum"]
            #币种不为“混合”、且勾选了“在合计栏中显示明细”时才计算这些
            unless quote.quote_format == 4
              # 报价类型为“阶梯报价”则不写
            # unless quote.quote_format == 2 || quote.quote_format == 4
            #   # 报价类型为“单项折扣”或“阶梯报价”则不写
              unless !term["has_summary_in_sum"]
                # 勾选了“在合计栏中显示汇总”时才汇总
                # binding.pry
                # 这里的“合计”是从报价项里计算出来的。最后的“总价”才是存数据库里以及显示在报价表里的。
                item_sum = 0
                quote_blocks = QuoteBlock.where("quote_id = ?", quote.id)
                for quote_block in quote_blocks
                  block_sum = 0
                  quote_items = QuoteItem.where("quote_block_id = ?", quote_block.id)
                  for quote_item in quote_items
                    block_sum += quote_item.discount_to
                  end
                  item_sum += block_sum * quote_block.quantity
                end

                sum_table << [(quote.language == 1) ? "合计：" : "Total Price: ", quote.currency.name + sprintf("%.2f",item_sum.to_f)]
                # sum_table << [(quote.language == 1) ? "合计：" : "Total EX-Works Price: ", quote.currency.name + sprintf("%.2f",quote.total.to_f + (quote.total_discount.to_f || 0) - (quote.fif.to_f || 0) - (quote.other_cost.to_f || 0))]
              end
            end
            unless quote.fif.blank?#运保费为空则不写
              sum_table << [(quote.language == 1) ? "运保费：" : "Freight & Insurance Cost: ", quote.fif_currency.name + sprintf("%.2f",quote.fif.to_f)]
            end
            unless quote.other_cost.blank?#其它费用为空则不写
              sum_table << [(quote.language == 1) ? "其它费用：" : "Other Cost: ", quote.fif_currency.name + sprintf("%.2f",quote.other_cost.to_f)]
            end
            unless quote.total_discount.blank?#折扣为空则不写
              sum_table << [(quote.language == 1) ? "折扣：" : "Less Special Discount: ", quote.fif_currency.name + sprintf("%.2f",quote.total_discount.to_f)]
            end
            unless quote.quote_format == 4
              # 报价类型为“阶梯报价”则不写
              unless !term["has_summary_in_sum"]
                # 勾选了“在合计栏中显示汇总”时才汇总
                sum_table << [(quote.language == 1) ? "总价：" : "Final Price: ", quote.currency.name + sprintf("%.2f",quote.total.to_f)]
              end
            end
            #sum_table << ["到货价：", quote.currency.name.to_s + quote.total.to_s]
            # binding.pry
            if(quote.currency_id == 1)#只有报价币种为人民币的时候才折合，别的时候不管
              unless (quote.quote_format == 4)#报价类型为“阶梯报价”则不写
                sum_table << ["折合人民币：", "RMB" + sprintf("%.2f",quote.total.to_f * quote.currency.exchange_rate / 100)]
              end
            end
            unless sum_table.size == 0#有可能上面一项都没有，那么就彻底没有这栏
              #还是和上面一样，先看是不是阶梯报价，是的话前面一栏要小上少许
              #其实还应该再看有没有“显示详情”的，不过这个好像不太影响视觉，等有需求的时候再写吧
              if quote.quote_format == 4
                column_set = [460, 100]
              else
                column_set = [570, 120]
              end

              table(sum_table,
                :column_widths => {0 => column_set[0], 1 => column_set[1]},
                :cell_style => {:padding => 3}
              ) do |t|
                t.cells.style do |cell|
                  cell.borders -= [:top] unless cell.row == 0
                  cell.borders -= [:bottom] unless cell.row == sum_table.length - 1
                  cell.align = :right
                end
                t.column(0..1).style do |c|#两列右对齐
                  c.align = :right
                end
                t.column(0).style do |c|#左列无右框
                  c.borders -= [:right]
                end
                t.column(1).style do |c|#右列无左框
                  c.borders -= [:left]
                end
              end
            end
          end
        end
      end

      move_down 25
      term0 = (quote.language == 1) ? "<u>条款</u>" : "<u>NOTES</u>"
      text term0, :inline_format => true, :size => 14

      move_down 10
      list_item = 0#编号
      if term["price_type_of_term"] != ""
       # p term[0]
        require "jcode"#汉字要截短
        if term["city_of_term"].is_a?(Integer)
          # 如果此值是数字，那么就在城市表里找
          city_name = City.find(term["city_of_term"]).name.split("市")[0]#截掉那个“市”字
          city_en_name = City.find(term["city_of_term"]).en_name
        else
          # 如果不是，就直接用
          city_name = term["city_of_term"]
        end

        if quote.language == 1
          # binding.pry
          term1 = city_name + price_type_array[term["price_type_of_term"].to_i - 1].to_s + "。"
         # term1 = City.find(term[0]).name.to_s + price_type_array[term[1].to_i-1].to_s + "。"#本来就没有“市”字了
          if term["is_include_tax"]#勾了“含税情况”才有，没勾就不管。英文的不会有此问题，不管。
            term1 += "以上价格" + receipt_array[term["receipt"].to_i - 1].to_s + "。"
          end
        else
          term1 = price_type_array_en[term["price_type_of_term"].to_i - 1].to_s + " " + city_en_name + "."
        end
        list_item += 1
        text "#{list_item}.　" + ((quote.language == 1) ? "价格条款：" : "Terms of Price: ") + term1, :leading => 4
      end

      move_down 6
      term2 = ""
      # binding.pry
      if term["pay_way1"] == 1
        #信用证
        if quote.language == 1
          # term["pay_unit1"] == 2表示是“%”，1是“混合”但这里没有
          term_money1 = (term["pay_unit1"] == 2)?(term["pay_count1"].to_s + "%"):("金额为" + pay_unit_hash[term["pay_unit1"]] + term["pay_count1"].to_s + "的")
          term2 += "签订报价后开立" + term_money1 + "即期不可撤销信用证，"
          if term["cad_count"] == 100 && term["cad_unit"] == 2
            #如果前面一个是100%，就没有“其余部分”了
            term2 += "100%见单即付。"
          else
            #不是100%，有“其余部分”
            term_money2 = (term["cad_unit"] == 2)?(term["cad_count"].to_s + "%"):(pay_unit_hash[term["cad_unit"]] + term["cad_count"].to_s)
            term2 += "其中" + term_money2 + "见单即付，"
            term_money3 = (term["cad_left_unit"] == 2)?(term["cad_left_count"].to_s + "%"):(pay_unit_hash[term["cad_left_unit"]] + term["cad_left_count"].to_s)
            term2 += "其余" + term_money3 + cad_left_via_array[term["cad_left_via"]-1] + "。"
          end
        else
          # term["pay_unit1"] == 2表示是“%”，1是“混合”但这里没有
          term_money1 = (term["pay_unit1"] == 2)?(term["pay_count1"].to_s + "% irrevocable L/C at sight"):("An irrevocable L/C at sight amount " + pay_unit_hash[term["pay_unit1"]] + term["pay_count1"].to_s + " ")
          term2 += term_money1 + "after signing the contract, "
          if term["cad_count"] == 100 && term["cad_unit"] == 2
            #如果前面一个是100%，就没有“其余部分”了
            term2 += " should be paid against the shipping documents. "
          else
            # binding.pry
            #不是100%，有“其余部分”
            term_money2 = (term["cad_unit"] == 2)?(term["cad_count"].to_s + "%"):(pay_unit_hash[term["cad_unit"]] + term["cad_count"].to_s)
            term2 += term_money2 + " of the L/C value should be paid against the shipping documents, "
            term_money3 = (term["cad_left_unit"] == 2)?(term["cad_left_count"].to_s + "%"):(pay_unit_hash[term["cad_left_unit"]] + term["cad_left_count"].to_s)
            term2 += term_money3 + " of the L/C value should be paid against " + cad_left_via_array_en[term["cad_left_via"]-1] + ". "
          end
        end
      else
        #电汇
        if quote.language == 1
          # binding.pry
          term_money1 = (term["pay_unit1"] == 2)?(term["pay_count1"].to_s + "%款项"):(pay_unit_hash[term["pay_unit1"]] + term["pay_count1"].to_s)
          term2 += "签订合同后" + pay_time_array[term["pay_time1"]-1] + "天内电汇预付" + term_money1 + "。"
        else
          #############################################
          term_money1 = (term["pay_unit1"] == 2)?(term["pay_count1"].to_s + "%"):(pay_unit_hash[term["pay_unit1"]] + term["pay_count1"].to_s)
          term2 += term_money1 + " T/T in advance within " + pay_time_array_en[term["pay_time1"]-1] + " days after signing the contract. "
        end
      end
      if term["pay_time2"].blank? or term["pay_count2"].blank? or term["pay_count2"] == 0 or term["pay_unit2"].blank?
        #有一个没填就算没填
      else
        term_money3 = (term["pay_unit2"] == 2)?(term["pay_count2"].to_s + "%"):(pay_unit_hash[term["pay_unit2"].to_i] + term["pay_count2"].to_s)
        if quote.language == 1
          term2 += "发货前" + pay_time_array[term["pay_time2"]-1] + "天内，电汇" + term_money3 + "款项。"
        else
          term2 += term_money3 + " T/T within " + pay_time_array_en[term["pay_time2"]-1] + " days before delivery. "
        end
      end
      # binding.pry
      if term["pay_time3"].blank? or term["pay_count3"].blank? or term["pay_count3"] == 0 or term["pay_unit3"].blank?
        #有一个没填就算没填
      else
        term_money4 = (term["pay_unit3"] == 2)?(term["pay_count3"].to_s + "%"):(pay_unit_hash[term["pay_unit3"].to_i] + term["pay_count3"].to_s)
        if quote.language == 1
          term2 += "发货后" + pay_time_array[term["pay_time3"]-1] + "天内，电汇" + term_money4 + "款项。"
        else
          term2 += term_money4 + " T/T within " + pay_time_array_en[term["pay_time3"]-1] + " days after delivery. "
        end
      end
      if term["pay_time4"].blank? or term["pay_count4"].blank? or term["pay_count4"] == 0 or term["pay_unit4"].blank?
        #有一个没填就算没填
      else
        term_money5 = (term["pay_unit4"] == 2)?(term["pay_count4"].to_s + "%"):(pay_unit_hash[term["pay_unit4"].to_i] + term["pay_count4"].to_s)
        if quote.language == 1
          term2 += "验收后" + pay_time_array[term["pay_time4"]-1] + "天内，电汇" + term_money5 + "款项。"
        else
          term2 += term_money5 + " T/T within " + pay_time_array_en[term["pay_time4"].to_i-1] + " days after the acceptance at customer site. "
        end
      end
      if term["pay_count5"].blank? or term["pay_count5"] == 0 or term["pay_unit5"].blank?
        #有一个没填就算没填
      else
        term_money6 = (term["pay_unit5"] == 2)?(term["pay_count5"].to_s + "%"):(pay_unit_hash[term["pay_unit5"].to_i] + term["pay_count5"].to_s)
        term2 += term_money6 + (quote.language == 1?"货款交货付现。":" COD. ")
      end

      list_item += 1
      text "#{list_item}.　" + ((quote.language == 1) ? "付款方式：" : "Terms of Payment: ") + term2, :leading => 4

      if term["is_delivery"] && !(term["deliver_time_from"].blank? && term["deliver_time_to"].blank?)#勾了“交货期”，且两个日期都填了值才有，否则就不管
        temp = []
        if quote.language == 1
          if term["deliver_time_from"].blank? && !term["deliver_time_to"].blank?
            t = term["deliver_time_to"].to_s
          elsif term["deliver_time_to"].blank? && !term["deliver_time_from"].blank?
            t = term["deliver_time_from"].to_s
          else
            t = term["deliver_time_from"].to_s + "至" + term["deliver_time_to"].to_s
          end
          # binding.pry
          term4 = delivery_point_array[term["delivery_point"]-1] + t + deliver_time_unit_array[term["deliver_time_unit"]-1] + "内发货。"
          temp << "圣诞" if term["fes_xmas"]
          temp << "新年" if term["fes_newy"]
          temp << "春节" if term["fes_sprg"]
          if temp.size > 0
            term4 += temp.join("、") + "假期不在其中。"
          end
        else
          if term["deliver_time_from"].blank? && !term["deliver_time_to"].blank?
            t = term["deliver_time_to"].to_s
          elsif term["deliver_time_to"].blank? && !term["deliver_time_from"].blank?
            t = term["deliver_time_from"].to_s
          else
            t = term["deliver_time_from"].to_s + "~" + term["deliver_time_to"].to_s
          end
          term4 = t + " " + deliver_time_unit_array_en[term["deliver_time_unit"]-1] + " " + delivery_point_array_en[term["delivery_point"]-1] + ". "
          temp << "Christmas holiday" if term["fes_xmas"]
          temp << "Spring festival" if term["fes_newy"]
          temp << "New year holiday" if term["fes_sprg"]
          if temp.size > 0
            term4 += "The delivery time does not include the " + temp.join("/") + "."
          end
        end

        move_down 6#因为上面行间距有了4，所以这里10就多了
        list_item += 1
        text "#{list_item}.　" + ((quote.language == 1) ? "交货期：" : "Delivery if Schedule: ") + term4, :leading => 4
      end

      if term["is_warranty"]#勾了“质量保证”才有，没勾就不管
        term5 = ""
        if quote.language == 1
          term5 += warranty_point_array[term["warranty_point"]-1] + warranty_time_array[term["warranty_time"]-1] + "个月内质保。" unless term["warranty_point"].blank?
          term5 += term["extra_warranty"] unless term["extra_warranty"].blank?
        else
          term5 += warranty_time_array[term["warranty_time"]-1] + " months "+ warranty_point_array_en[term["warranty_point"]-1] + ". " unless term["warranty_point"].blank?
          term5 += term["extra_warranty"] unless term["extra_warranty"].blank?
        end

        move_down 6
        list_item += 1
        text "#{list_item}.　" + ((quote.language == 1) ? "质量保证：" : "Warranty: ") + term5, :leading => 4
      end

      if term["need_disassemble"]
        move_down 6
        list_item += 1
        text "#{list_item}.　" + ((quote.language == 1) ? "开机检测费：确定故障原因后，若客户同意维修，则开机检测费可免；若客户决定不维修，则只需支付开机检测费。" : "After the equipment(s) inspection, ETSC will inform customer. If customer agrees to repair the equipment(s), then ETSC will not charge the inspection cost, or the inspection cost should be charged."), :leading => 4
      end

      if term["need_on-site"]
        term6 = ""
        if quote.language == 1
          term6 += "上门服务费：若需上门服务，则需另外支付上门服务费#{pay_unit_hash[term["pay_unit7"]]}#{term["pay_count7"]}/次(含差旅费)。"
        else
          term6 += "Engineers on-site service cost #{pay_unit_hash[term["pay_unit7"]]}#{term["pay_count7"]} should be charged if customer need on-site service."#好像没有包含“每次”的意义？TODO
        end
        move_down 6
        list_item += 1
        text "#{list_item}.　" + term6, :leading => 4
      end

      if term["is_special_discount"]#特别折扣
        if quote.language == 1
          term7 = "此为给" + quote.customer_unit.name + "的一次性特别折扣"
          term7 += "，此折扣有效期以工厂折扣结束时间为准" if term["is_discount_limit"]#折扣有效期
          term7 += "。"
        else
          term7 = "This is one-time special discount to " + quote.customer_unit.en_name + " only. "
          term7 += "This price is special promotion price, validates until the promotion period ending. " if term["is_discount_limit"]#折扣有效期
        end

        move_down 6
        list_item += 1
        text "#{list_item}.　" + ((quote.language == 1) ? "特别折扣：" : "Special discount: ") + term7, :leading => 4
      end

      move_down 6
      list_item += 1
      if quote.language == 1
        text "#{list_item}.　报价有效期：本报价有效期至" + DateTime.parse(term["valid_time"]).strftime('%Y年%m月%d日').to_s + '。', :leading => 4
      else
        text "#{list_item}.　This quotation's validity expands until " + DateTime.parse(term["valid_time"]).strftime('%b %d, %Y').to_s + '.', :leading => 4
      end

      if !term["extra_term"].blank?
        #只有填了其它条款才有
        move_down 6
        list_item += 1
        text "#{list_item}.　"+ ((quote.language == 1) ? "其它条款：" : "Other terms: ") + term["extra_term"], :leading => 4
      end


      #    以下就是“要生成的格式”
      #    1.  价格条款：武汉到货价。此价格不含税，如需开具发票，需收取相应发票税。/以上价格已含普通发票税（增值税）
      #    2.  付款方式：签订报价后15天内电汇预付30％款项，发货前15天内电汇支付30％款项，发货后15天内电汇支付30％款项，验收后15天内电汇支付10％款项
      #        （60%款项交货付现）
      #        （签订报价后开立100%即期不可撤销信用证，其中90%见单即付，10%验收合格后凭验收报告议付。）
      #        （签订报价后开立金额为USD3000的即期不可撤销信用证，其中90%见单即付，10%验收合格后凭验收报告议付。）
      #        （签订报价后开立90%的即期不可撤销信用证，100%见单即付。验收后15天内电汇10％款项。）
      #        （签订报价后开立90%的即期不可撤销信用证，100%见单即付。发货后30天内电汇10％款项。）
      #        （签订报价后开立90%的即期不可撤销信用证，其中90%见单即付，10%验收合格后凭验收报告议付。验收后6个月内电汇10％款项。）
      #    3.  交货期：收到预付款后 / 签订报价后 / 收到信用证后        周内发货。春节假期不在其中
      #    4.  质量保证：我方承诺自货物发出之日起 / 货物到港之日起 / 验收合格之日起1年内质保。
      #    5.  开机检测费：确定故障原因后，若客户同意维修，则开机检测费可免；若客户决定不维修，则只需支付开机检测费。
      #    6.  上门服务费：若需上门服务，则需另外支付上门服务费USD500/次(含差旅费)。
      #    7.  此价格为给 武汉光迅科技股份有限公司 的一次性特别折扣 / 此折扣有效期以工厂折扣结束时间为准
      #    8.  报价有效期：此报价有效期至2009年  月  日。
      #
      #    1.  Terms of Price: CIF Beijing.(Ex-works / FOB USA / DDU Wuhan / DDP Wuhan)
      #    2.  Terms of Payment: 30％T/T in advance within 15 days after signing the contract, 60％T/T within 15 days before delivery, 100％T/T within 15 days after delivery, 100％T/T within 15 days after the acceptance at customer site.(100% COD)  [T/T USD230 within 15 days]
      #    （100% Irrevocable L/C at sight, 90% of the contract value should be paid against the shipping documents; 10% of the contract value should be paid against the Certificate of Acceptance. ）
      #    （90% Irrevocable L/C at sight, should be paid against the shipping documents; 10％T/T within 15 days after the acceptance at customer site）
      #    （90% Irrevocable L/C at sight, should be paid against the shipping documents; 100％T/T within 15 days after delivery）
      #    （90% Irrevocable L/C at sight, 90% of the LC value should be paid against the shipping documents; 10% of the LC value should be paid against the Certificate of Acceptance. 10％T/T within 6 months after the acceptance at customer site. ）
      #    3.  Delivery if Schedule: 6-8 weeks after (receipt of the payment/ signing the contract / receipt of the L/C). The delivery time does not include the (Christmas holiday / Spring festival / New year holiday)
      #    4.  Warranty: 1 year after (shipping out the goods / the goods arrival at the destination / the acceptance)
      #    5.  After the equipment(s) inspection, ETSC will inform customer. If customer agrees to repair the equipment(s), then ETSC will not charge the inspection cost, or the inspection cost should be charged.
      #    6.  Engineers on-site service cost USD500 should be charged if customer need on-site service.
      #    7.  This is one-time special discount to XX only.
      #    / This price is special promotion price, validates until the promotion period ending
      #    8.  This quotation’s validity expands until Dec 18, 2009.


      #          table([["foo", "bar " * 15, nil.to_s],
      #            ["baz", "bar", "foo " * 15]], :cell_style => { :padding => 12 }) do
      #            cells.borders = []
      #
      #            # Use the row() and style() methods to select and style a row.
      #            style row(0), :border_width => 2, :borders => [:bottom]
      #
      #            # The style method can take a block, allowing you to customize properties
      #            # per-cell.
      #            style(columns(0..1)) { |cell| cell.borders |= [:right] }
      #          end
      #
      #          move_down 12
      #
      #          table([%w[foo bar bazbaz], %w[baz bar foofoo]],
      #            :cell_style => { :padding => 12 }, :width => bounds.width)
    end
   # #全部完成后，如果报价没有完成时间，则完成时间设成当前时间
   # if quote.work_task.completed_on.nil?
   #   quote.work_task.completed_on = DateTime.now
   #   quote.work_task.last_user_id = session[:user_id]
   #   quote.work_task.save
   # end
    #报价的状态可以改了，目前定为改成2吧
    quote.status = 2
    quote.save
    render :text => {"str" => "OK", "number" => quote.quote_number}.to_json
  end

  def download_quotation(dummy=nil)
    send_file("#{Rails.root}/public/files/quotation/#{params[:id]}.pdf",:disposition => "attachment")
  end

  def view_quotation(dummy=nil)
    send_file("#{Rails.root}/public/files/quotation/#{params[:id]}.pdf",:disposition => "inline", :type => "application/pdf")
  end

  # 改进后的简版重新计算报价价格
  def recalculate
    # 排内部顺序
    # params["quote_item_ids"]有两种情况：“B99|I30|I31|B100|I32”这样带报价块的格式、“I40|I41|I42”这样不带报价块的格式，分别处理
    if params["quote_item_ids"].include?("B")
    # binding.pry
      # 带报价块，先按报价块切开 => ["99|I30|I31", "100|I32"]
      quote_block_array = params["quote_item_ids"].split(/\|?B/)[1..-1]
      quote_block_array.each_with_index do |item, index|
        # 反正要循环的，就在这循环里构造币种数组
        quote_block_currency_array = []
        quote_block_discounted_unit_price_array = []
        quote_block_discount_to_array = []

        quote_block_id = item.split("|")[0].to_i
        quote_block = QuoteBlock.find(quote_block_id)
        quote_block.inner_order = index
        quote_block.save

        quote_item_array = item.split("|")[1..-1].map{|p| p[1..-1]}#去掉那个“I”
        quote_item_array.each_with_index do |item_2, index_2|
          quote_item_id = item_2.to_i
          quote_item = QuoteItem.find(quote_item_id)
          quote_item.inner_order = index_2
          quote_item.quote_block_id = quote_block_id
          quote_item.save
          quote_block_currency_array << quote_item.discounted_currency_id
          quote_block_discounted_unit_price_array << QuoteItem.find(quote_item_id).discount_to.to_f
          quote_block_discount_to_array << QuoteItem.find(quote_item_id).discount_to.to_f * quote_block.quantity
        end
        if quote_block_currency_array.uniq.size > 1
          quote_block.discounted_currency_id = 1
          quote_block.discounted_unit_price = nil
          quote_block.discount_to = nil
        else
          quote_block.discounted_currency_id = quote_block_currency_array[0]
          quote_block.discounted_unit_price = quote_block_discounted_unit_price_array.sum
          quote_block.discount_to = quote_block_discount_to_array.sum
        end
        quote_block.save
      end
    else
      # 不带报价块，直接取各报价项
      quote_item_array = params["quote_item_ids"].split("|").map{|p| p[1..-1]}#去掉“I”
      quote_block = QuoteItem.find(quote_item_array[0]).quote_block
      quote_block_currency_array = []
      quote_block_discount_to_array = []

      quote_item_array.each_with_index do |item, index|
        quote_item_id = item.to_i
        quote_item = QuoteItem.find(quote_item_id)
        quote_item.inner_order = index
        quote_item.save
        quote_block_currency_array << quote_item.discounted_currency_id
        quote_block_discount_to_array << QuoteItem.find(quote_item_id).discount_to.to_f
      end
      if quote_block_currency_array.uniq.size > 1
        quote_block.discounted_currency_id = 1
        quote_block.discount_to = nil
      else
        quote_block.discounted_currency_id = quote_block_currency_array[0]
        quote_block.discount_to = quote_block_discount_to_array.sum
      end
      quote_block.save
    end
    # binding.pry
    if params["quote_id"] == "0"
      quote_blocks = QuoteBlock.where("session = ?", session["session_id"])
      quote_currency_array = []
      # quote_discounted_unit_price_array =[]
      quote_discount_to_array = []
      for quote_block in quote_blocks
        quote_currency_array << quote_block.discounted_currency_id
        quote_discount_to_array << quote_block.discount_to
      end
      if quote_currency_array.uniq.include?(1) || params["quote_format"] == "4"
        sum_table = nil
      else
        sum_table = quote_discount_to_array.sum
      end

      max_custom_tax = Product.where("quote_blocks.session = ?", session["session_id"]).joins(:quote_items => :quote_block).map{|p| p.custom_tax.to_f}.max * 100

      render :json => {"sum_table" => sum_table, "max_custom_tax" => max_custom_tax, "str" => "OK"}
    else
      quote = Quote.find(params["quote_id"])
      quote_blocks = QuoteBlock.where("quote_id = ?", params["quote_id"])
      quote_currency_array = []
      quote_discount_to_array = []
      for quote_block in quote_blocks
        quote_currency_array << quote_block.discounted_currency_id
        quote_discount_to_array << quote_block.discount_to
      end
      if quote_currency_array.uniq.include?(1) || quote.quote_format == 4
        quote.currency_id = 1
        quote.total = nil
        sum_table = nil
      else
        quote.currency_id = quote_currency_array[0]
        quote.total = quote_discount_to_array.sum
        sum_table = quote_discount_to_array.sum
      end
      quote.save

      max_custom_tax = Product.where("quotes.id = ?", params["quote_id"]).joins(:quote_items => {:quote_block => :quote}).map{|p| p.custom_tax.to_f}.max * 100

      render :json => {"sum_table" => sum_table, "max_custom_tax" => max_custom_tax, "str" => "OK", "success" => true}
    end
  end
end
