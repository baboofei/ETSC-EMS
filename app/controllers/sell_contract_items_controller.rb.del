class ContractItemsController < ApplicationController
  before_filter :authorize, :time_zone_adjust
  skip_before_filter :verify_authenticity_token
  layout "basic"
  # GET /contract_items
  # GET /contract_items.xml
  def index
    @contract_items = ContractItem.all

    respond_to do |format|
      format.html # index.html.erb
      format.xml  { render :xml => @contract_items }
    end
  end

  # GET /contract_items/1
  # GET /contract_items/1.xml
  def show
    @contract_item = ContractItem.find(params[:id])

    respond_to do |format|
      format.html # show.html.erb
      format.xml  { render :xml => @contract_item }
    end
  end

  # GET /contract_items/new
  # GET /contract_items/new.xml
  def new
    @contract_item = ContractItem.new

    respond_to do |format|
      format.html # new.html.erb
      format.xml  { render :xml => @contract_item }
    end
  end

  # GET /contract_items/1/edit
  def edit
    @contract_item = ContractItem.find(params[:id])
  end

  # POST /contract_items
  # POST /contract_items.xml
  def create
    @contract_item = ContractItem.new(params[:contract_item])

    respond_to do |format|
      if @contract_item.save
        format.html { redirect_to(@contract_item, :notice => 'Sell contract item was successfully created.') }
        format.xml  { render :xml => @contract_item, :status => :created, :location => @contract_item }
      else
        format.html { render :action => "new" }
        format.xml  { render :xml => @contract_item.errors, :status => :unprocessable_entity }
      end
    end
  end

  # PUT /contract_items/1
  # PUT /contract_items/1.xml
  def update
    @contract_item = ContractItem.find(params[:id])

    respond_to do |format|
      if @contract_item.update_attributes(params[:contract_item])
        format.html { redirect_to(@contract_item, :notice => 'Sell contract item was successfully updated.') }
        format.xml  { head :ok }
      else
        format.html { render :action => "edit" }
        format.xml  { render :xml => @contract_item.errors, :status => :unprocessable_entity }
      end
    end
  end

  # DELETE /contract_items/1
  # DELETE /contract_items/1.xml
  def destroy
    @contract_item = ContractItem.find(params[:id])
    @contract_item.destroy

    respond_to do |format|
      format.html { redirect_to(contract_items_url) }
      format.xml  { head :ok }
    end
  end

  def save_quantity_ajax
    #按传来的参数保存合同项里的产品数量
#    if params[qty].blank?
#      #如果为空的时候直接点了确定就保持不变
#      render :text => {'str' => 'OK'}.to_json
#    else
# => 好吧，为空点不了确定，至少要填原因
#    end
      contract_ids = params[:id].split("_")
      saved = 0
      for sci in contract_ids
        sci = ContractItem.find(sci)
        #先存相应的信息到history_contract_items表
        attributes = sci.attributes
        attributes.delete("lock_version")
        hsci = HistoryContractItem.new(attributes)
        hsci.save
        #然后把本次的改动更新进contract_items表
        sci.product_quantity = params[:qty].to_i
        sci.reason = params[:reason]
        saved=saved+1 if sci.save
      end
      if saved == contract_ids.size
        render :text => {'str' => 'OK'}.to_json
      else
        render :text => {'str' => 'XX'}.to_json
      end
  end

  def save_send_status_ajax
    #按传来的参数保存合同项里的发货状态
      contract_ids = params[:id].split("_")
      saved = 0
      for sci in contract_ids
        sci = ContractItem.find(sci)
        #先存相应的信息到history_contract_items表
        attributes = sci.attributes
        attributes.delete("lock_version")
        hsci = HistoryContractItem.new(attributes)
        hsci.save
        #然后把本次的改动更新进contract_items表
        sci.send_status = params[:ss].to_i
        sci.reason = params[:reason]
        saved=saved+1 if sci.save
      end
      if saved == contract_ids.size
        render :text => {'str' => 'OK'}.to_json
      else
        render :text => {'str' => 'XX'}.to_json
      end
  end

  def save_elfo_ajax
    #按传来的参数保存合同项里的预计发货时间
      contract_ids = params[:id].split("_")
      saved = 0
      for sci in contract_ids
        sci = ContractItem.find(sci)
        #先存相应的信息到history_contract_items表
        attributes = sci.attributes
        attributes.delete("lock_version")
        hsci = HistoryContractItem.new(attributes)
        hsci.save
        #然后把本次的改动更新进contract_items表
        sci.expected_leave_factory_on = params[:elfo]
        sci.reason = params[:reason]
        saved=saved+1 if sci.save
      end
      if saved == contract_ids.size
        render :text => {'str' => 'OK'}.to_json
      else
        render :text => {'str' => 'XX'}.to_json
      end
  end

  def save_alfo_ajax
    #按传来的参数保存合同项里的实际发货时间
      contract_ids = params[:id].split("_")
      saved = 0
      for sci in contract_ids
        sci = ContractItem.find(sci)
        #先存相应的信息到history_contract_items表
        attributes = sci.attributes
        attributes.delete("lock_version")
        hsci = HistoryContractItem.new(attributes)
        hsci.save
        #然后把本次的改动更新进contract_items表
        sci.actually_leave_factory_on = params[:alfo]
        sci.reason = params[:reason]
        saved=saved+1 if sci.save
      end
      if saved == contract_ids.size
        render :text => {'str' => 'OK'}.to_json
      else
        render :text => {'str' => 'XX'}.to_json
      end
  end

  def save_rco_ajax
    #按传来的参数保存合同项里的到客户处时间
      contract_ids = params[:id].split("_")
      saved = 0
      for sci in contract_ids
        sci = ContractItem.find(sci)
        #先存相应的信息到history_contract_items表
        attributes = sci.attributes
        attributes.delete("lock_version")
        hsci = HistoryContractItem.new(attributes)
        hsci.save
        #然后把本次的改动更新进contract_items表
        sci.reach_customer_on = params[:rco]
        sci.reason = params[:reason]
        saved=saved+1 if sci.save
      end
      if saved == contract_ids.size
        render :text => {'str' => 'OK'}.to_json
      else
        render :text => {'str' => 'XX'}.to_json
      end
  end

  def save_caao_ajax
    #按传来的参数保存合同项里的验收时间
      contract_ids = params[:id].split("_")
      saved = 0
      for sci in contract_ids
        sci = ContractItem.find(sci)
        #先存相应的信息到history_contract_items表
        attributes = sci.attributes
        attributes.delete("lock_version")
        hsci = HistoryContractItem.new(attributes)
        hsci.save
        #然后把本次的改动更新进contract_items表
        sci.check_and_accept_on = params[:caao]
        sci.reason = params[:reason]
        saved=saved+1 if sci.save
      end
      if saved == contract_ids.size
        render :text => {'str' => 'OK'}.to_json
      else
        render :text => {'str' => 'XX'}.to_json
      end
  end

  def save_term_ajax
    #按传来的参数保存合同项里的质保条款
      contract_ids = params[:id].split("_")
      saved = 0
      for sci in contract_ids
        sci = ContractItem.find(sci)
        #先存相应的信息到history_contract_items表
        attributes = sci.attributes
        attributes.delete("lock_version")
        hsci = HistoryContractItem.new(attributes)
        hsci.save
        #然后把本次的改动更新进contract_items表
        sci.term = params[:term].to_i
        sci.reason = params[:reason]
        saved=saved+1 if sci.save
      end
      if saved == contract_ids.size
        render :text => {'str' => 'OK'}.to_json
      else
        render :text => {'str' => 'XX'}.to_json
      end
  end

  def save_multi_ajax
    #按传来的参数保存合同项的所有值，
    contract_ids = params[:id].split("_")
    saved = 0
    for sci in contract_ids
      sci = ContractItem.find(sci)
      sci.product_quantity = params[:qty] unless params[:qty].blank?
      sci.send_status = params[:ss] unless params[:ss].blank?
      sci.expected_leave_factory_on = params[:elfo] unless params[:elfo].blank?
      sci.actually_leave_factory_on = params[:alfo] unless params[:alfo].blank?
      sci.reach_customer_on = params[:rco] unless params[:rco].blank?
      sci.check_and_accept_on = params[:caao] unless params[:caao].blank?
      sci.term = params[:wt] unless params[:wt].blank?
      saved=saved+1 if sci.save
    end
    if saved == contract_ids.size
      render :text => {'str' => 'OK'}.to_json
    else
      render :text => {'str' => 'XX'}.to_json
    end
  end

  def save_single_ajax
    #按传来的参数保存单个合同项的所有值，
    sci = ContractItem.find(params[:id])
    sci.product_id = params[:product]
    sci.product_quantity = params[:qty]
    sci.send_status = params[:ss]
    sci.expected_leave_factory_on = params[:elfo]
    sci.actually_leave_factory_on = params[:alfo]
    sci.reach_customer_on = params[:rco]
    sci.check_and_accept_on = params[:caao]
    sci.term = params[:wt]
    if sci.save
      render :text => {'str' => 'OK'}.to_json
    else
      render :text => {'str' => 'XX'}.to_json
    end
  end

  def new_single_ajax
    #    p params
    #按传来的参数新增单个合同项的所有值，
    sci = ContractItem.new()
    sci.contract_id = params[:id]
    sci.product_id = params[:product]
    sci.product_quantity = params[:qty]
    sci.send_status = params[:ss]
    sci.expected_leave_factory_on = params[:elfo]
    sci.actually_leave_factory_on = params[:alfo]
    sci.reach_customer_on = params[:rco]
    sci.check_and_accept_on = params[:caao]
    sci.term = params[:wt]
    if sci.save
      history_contract_item = HistoryContractItem.new
      old_contract_item = sci
      history_contract_item.contract_id = old_contract_item.contract_id
      history_contract_item.product_id = old_contract_item.product_id
      history_contract_item.product_quantity = old_contract_item.product_quantity
      history_contract_item.send_status = old_contract_item.send_status
      history_contract_item.commodity_id = old_contract_item.commodity_id
      history_contract_item.expected_leave_factory_on = old_contract_item.expected_leave_factory_on
      history_contract_item.actually_leave_factory_on = old_contract_item.actually_leave_factory_on
      history_contract_item.leave_etsc_on = old_contract_item.leave_etsc_on
      history_contract_item.reach_customer_on = old_contract_item.reach_customer_on
      history_contract_item.check_and_accept_on = old_contract_item.check_and_accept_on
      history_contract_item.term = old_contract_item.term
      history_contract_item.reason = params[:reason]
      history_contract_item.is_new = true#因为是增
      if history_contract_item.save
        render :text => {'str' => 'OK'}.to_json
      else
        render :text => {'str' => 'XX'}.to_json
      end
    else
      render :text => {'str' => 'XX'}.to_json
    end
  end

  #
  def delete_items_ajax
    contract_items = params[:id].split("_")
    deleted = 0
    for contract_item in contract_items
      #先把信息保存到合同项历史里面
      history_contract_item = HistoryContractItem.new
      old_contract_item = ContractItem.find(contract_item)
      history_contract_item.contract_id = old_contract_item.contract_id
      history_contract_item.product_id = old_contract_item.product_id
      history_contract_item.product_quantity = old_contract_item.product_quantity
      history_contract_item.send_status = old_contract_item.send_status
      history_contract_item.commodity_id = old_contract_item.commodity_id
      history_contract_item.expected_leave_factory_on = old_contract_item.expected_leave_factory_on
      history_contract_item.actually_leave_factory_on = old_contract_item.actually_leave_factory_on
      history_contract_item.leave_etsc_on = old_contract_item.leave_etsc_on
      history_contract_item.reach_customer_on = old_contract_item.reach_customer_on
      history_contract_item.check_and_accept_on = old_contract_item.check_and_accept_on
      history_contract_item.term = old_contract_item.term
      history_contract_item.reason = params[:reason]
      history_contract_item.is_new = false#因为是删
      history_contract_item.editor_user_id = session[:user_id]
      history_contract_item.edited_on = DateTime.now
      #然后删旧的
      if history_contract_item.save
        ContractItem.find(contract_item).destroy
        deleted += 1
      end
    end
    if deleted == contract_items.size
      render :text => {'str' => 'OK'}.to_json
    else
      render :text => {'str' => 'XX'}.to_json
    end
  end
  
  #生成指定合同下合同项的列表JSON，不分页，没有关键字
  def gen_contract_item_json(contract_id, sort = "id", dir = "DESC")
    contract_item_json = []
    if contract_id == "0"
      #如果contract_id是0就取“无主”的
      total_records = ContractItem.where("contract_items.session = ?", session["session_id"]).includes(:product, {:product => :producer})
      contract_items = ContractItem.where("contract_items.session = ?", session["session_id"]).order(sort + " " + dir).includes(:product, {:product => :producer})
    else
      #是其它就取对应的Contract
      total_records = ContractItem.where("contract_items.contract_id = ?", contract_id).includes(:product, {:product => :producer})
      contract_items = ContractItem.where("contract_items.contract_id = ?", contract_id).includes(:product, {:product => :producer}).order(sort + " " + dir)
      #多重排序是有可能的，但先不这么排吧
      #collections = Collection.where("contract_id = ? and contract_type = 'Contract'", contract_id).order(["received_on DESC", "actually_receive_on ASC"])
    end

    for contract_item in contract_items
      contract_item_json << gen_etsc_contract_item_json(contract_item)
    end
    {"totalRecords" => total_records.size.to_s, "data" => contract_item_json}
  end

  def restful
    if request.get?
      #查
      respond_to do |format|
        format.json {
          if params[:sort].nil?
            #如果没有在表格里排序，则按id排序
            contract_item_json = gen_contract_item_json(params["contract_id"])#,params[:sort],params[:dir])
          else
            #如果表格里有排序，会传过来类似"[{\"property\":\"mobile\",\"direction\":\"ASC\"}]"的参数
            sort_param_hash = JSON.parse(params[:sort])
            sort = sort_param_hash[0]["property"]
            #用了别称的字段，要这样转回去。记得带上表的名字
            sort = "vendor_units.name" if sort == "producer"
            sort = "products.name" if sort == "product"
            dir = sort_param_hash[0]["direction"]
            contract_item_json = gen_contract_item_json(params["contract_id"],sort,dir)
          end
          render :text => contract_item_json.to_json
        }
      end
    elsif request.put?
      #改
      data = params["data"]
      #处理完毕，新增json、砍多余字段
      contract_item_json = []
      contract_item_id = data["id"]
      contract_item = ContractItem.find(contract_item_id)
      params["data"]["product_id"] = params["data"]["product"] unless data["product"].blank?
      data.delete("product")
      data.delete("id")
      data.delete("expected_leave_factory_on") if data["expected_leave_factory_on"].blank?
      data.delete("actually_leave_factory_on") if data["actually_leave_factory_on"].blank?
      data.delete("reach_customer_on") if data["reach_customer_on"].blank?
      data.delete("check_and_accept_on") if data["check_and_accept_on"].blank?
      data["user_id"] = session[:user_id]

      #视有无reason而定是直接保存还是保存历史
      unless data["reason"]
        #无reason，直接存
        contract_item.update_attributes(data)
        data["id"] = contract_item_id
      else
        #有reason，先存相应的信息到history_contract_items表
        attributes = contract_item.attributes
        attributes.delete("lock_version")
        attributes.delete("session")
        attributes["editor_user_id"] = attributes["user_id"]
        attributes.delete("user_id")
        hsci = HistoryContractItem.new(attributes)
        hsci.save
        #然后把本次的改动更新进contract_items表
        contract_item.update_attributes(data)
        data["id"] = contract_item_id
      end
      contract_item_json << gen_etsc_contract_item_json(contract_item)
      render :text => {"success" => true, "message" => "已修改", "data" => contract_item_json}.to_json
    elsif request.post?
      #增
      data = params["data"]
      #如果每项都为空，则返回一个空值。刚点完“新增”的时候就是这种情况，必须留着这些判断
      all_blank = true
      data.each do |key,val|
        unless val.blank?
          all_blank = false
          break
        end
      end

      if all_blank
        render :text => {"success" => true, "message" => "空"}.to_json
      else
        #如果不是都为空，也就是实际填了值的时候提交，又要判断是新增合同还是修改合同
        #判断contract_id
        if params["contract_id"] == "0"
          #如果是0，说明还没选中合同，是从头新增，则先把这一条加一个临时的属性存起来
          params["data"]["session"] = session["session_id"]
        else
          #如果不是0，说明选中了合同，这一项等于传过来的合同ID
          params["data"]["contract_id"] = params["contract_id"]
        end
        params["data"]["product_id"] = params["data"]["product"]
        #增的时候如果没有选发货情况，则默认成1
        params["data"]["send_status"] = 1 if params["data"]["send_status"] == ""

        params["data"]["user_id"] = session["session_id"]
        #处理完毕，新增json、砍多余字段
        contract_item_json = []
        params["data"].delete("product")
        params["data"].delete("producer")
        params["data"].delete("producer_id")
        params["data"].delete("send_status_id")

        contract_item = ContractItem.new(data)
        contract_item.save
        data["id"] = contract_item.id
        contract_item_json << gen_etsc_contract_item_json(contract_item)
        render :text => {"success" => true, "message" => "已新建", "data" => contract_item_json}.to_json
      end
    end
  end

  #自定义生成所需字段的json，给“增”“改”“查”用
  def gen_etsc_contract_item_json(contract_item)
    if p = contract_item.product
      product = p.name_txt + "(" + p.producer.name + ")"
      product_id = p.id
      producer = p.producer.name
      producer_id = p.producer.id
    else
      product = ""
      product_id = nil
      producer = ""
      producer_id = nil
    end
    {
      'id' => contract_item.id,
      'product' => product,
      'product_id' => product_id,
      'producer' => producer,
      'producer_id' => producer_id,
      'product_quantity' => contract_item.product_quantity.to_s,
      'serial_number' => contract_item.serial_number,
      'send_status' => contract_item.send_status_txt,
      'send_status_id' => contract_item.send_status,
      'expected_leave_factory_on' => contract_item.expected_leave_factory_on ? contract_item.expected_leave_factory_on.strftime("%Y年%m月%d日") : "",
      'appointed_leave_factory_on' => contract_item.appointed_leave_factory_on ? contract_item.appointed_leave_factory_on.strftime("%Y年%m月%d日") : "",
      'actually_leave_factory_on' => contract_item.actually_leave_factory_on ? contract_item.actually_leave_factory_on.strftime("%Y年%m月%d日") : "",
      'leave_etsc_on' => contract_item.leave_etsc_on ? contract_item.leave_etsc_on.strftime("%Y年%m月%d日") : "",
      'reach_customer_on' => contract_item.reach_customer_on ? contract_item.reach_customer_on.strftime("%Y年%m月%d日") : "",
      'check_and_accept_on' => contract_item.check_and_accept_on ? contract_item.check_and_accept_on.strftime("%Y年%m月%d日") : "",
      'term' => contract_item.term
    }
  end

  #清空表格那边的临时数据
  def clear_temp
    #先考虑没选中合同时的情况：直接删掉所有当前session下的记录
    if ContractItem.delete_all(["session = ?", session["session_id"]])
      render :text => {"success" => true, "message" => "已删除"}
    else
      render :text => {"success" => false, "message" => "未删除"}
    end
  end
end
